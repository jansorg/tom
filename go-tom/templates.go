// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/reports/html/commons.gohtml
// templates/reports/html/default.gohtml
// templates/reports/html/timelog.gohtml

package tom


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataReportsHtmlCommonsGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\xeb\x6f\xdb\x38\x12\xff\xde\xbf\x62\xe0\xdc\x02\x4d\x61\xc9\x76\xda\xf4\x5a\x35\x0d\xb6\xdb\xc7\x6d\x81\x16\x7b\xa8\xbb\x38\xe0\xbe\x51\xd2\xd8\x62\xc3\x87\x40\xd2\x49\x5c\xc3\xff\xfb\x81\x7a\xd8\x12\x45\xd9\x72\x36\xd8\x0f\x57\x01\xb5\x24\x0e\x67\x7e\x33\x9c\x17\xa9\x6c\x36\x29\x2e\xa8\x40\x18\x71\x29\x70\xfd\x85\x6a\x33\xda\x6e\x9f\x00\x00\x6c\x36\x8a\x88\x25\x42\x58\x3d\x97\xef\x16\x52\x71\x62\xbe\x5a\x62\x3b\x72\x15\xab\xeb\x8a\x1a\x45\xba\xdd\x3e\xa9\x7f\x9f\xec\x39\xa7\x2b\x45\x0c\x95\x62\xcf\xf8\x8e\x9a\xcc\xe1\x1b\xc0\xe4\xd9\x52\x9a\x75\x8e\x11\x2c\xa9\xc9\x56\x71\x98\x48\x3e\xf9\x41\x84\x96\x6a\x39\x31\x92\x4f\x96\x32\xb0\x3f\x29\x31\xf8\x9d\x72\x0c\x3f\x54\x7c\xe7\x2b\xfe\x6c\x02\x41\x8b\x1d\x5d\x40\xf8\x59\x7f\x93\x2b\x91\x62\xfa\x5f\x54\xb2\x31\x6a\xff\x5d\xe9\x9c\x08\x48\x18\xd1\xfa\xed\x0e\x60\xf0\x13\x95\x1c\x5d\x6f\x36\x9c\x8a\x9a\x39\x84\xff\x42\xb3\xdd\x5e\x4d\xec\x84\xeb\x86\x04\x64\x1a\x7d\x4c\x87\x4e\x2f\xac\x34\xd0\x72\xff\xa1\x26\xfb\x78\x4f\x92\xc6\xda\xfc\x43\x67\xf2\xae\x78\x07\xd1\x5b\x50\x98\x4b\x65\xfe\xc8\x2d\xb1\x0e\xe7\xf5\x50\x8d\x42\x83\xe5\xfb\xff\x62\xfb\x1a\x34\x5d\x40\xc3\x0a\x81\x23\xa5\x90\x14\xab\xeb\xc7\x91\xb6\x5f\xae\x47\x58\xfd\xbf\xa0\xc0\x66\x03\x74\xf6\x4a\xc0\xa8\x32\x2f\xec\x82\x0b\xb6\x5b\x9f\x42\x05\xef\xc1\x5a\x0d\x71\x4a\xa3\x48\x72\x83\xe9\x67\xb1\x90\x8f\x1d\xd1\xf6\xbf\x8f\xc2\xa8\xf5\x1c\x15\x45\xdd\xf1\xac\xc9\x33\x47\xc1\xaf\x54\x6c\xb7\xcf\x26\x47\x88\xc8\x7d\x87\xa8\x45\xf0\xee\x76\x79\x5c\xed\xf9\x8a\x73\xa2\xd6\x7b\x95\x8f\xe8\xb7\x94\x86\x72\xac\x7f\xca\x00\x0d\xbf\xa1\x5e\x31\xf3\xdb\x2a\xb9\x41\x53\x69\x57\x70\xbb\x32\x24\x66\x58\x2f\xb2\xae\x44\xed\x97\xeb\xca\xc4\x32\x5d\x5f\xb7\x82\x2c\xfc\xac\xff\xad\xe4\x0f\x4c\x2a\x7e\xae\x3b\x1a\x75\xdd\xf5\x27\x93\x5e\x6f\x36\xa5\x07\x55\x93\x47\xd6\x39\x4c\xea\xa5\xad\x01\x19\x6a\x18\x5a\xef\x0a\xbf\xdb\x3b\xdf\x8c\xab\x49\x53\x5e\xd7\xb5\xe8\x02\x84\x34\x4e\xa2\xfa\x56\x5a\xe5\x03\x31\xf8\x89\x32\x83\xea\x9b\xad\x38\xe1\x47\x9e\x9b\x35\x9c\xaa\x8f\x75\x1e\x28\x4a\x56\x34\x4c\x27\x8e\x41\x41\x6e\x15\x1b\x84\xeb\x2b\x15\x94\x13\x36\x37\x8a\x8a\xe5\x20\x23\x30\x8d\x50\x69\x5e\x70\x6b\xe8\xf7\xb7\xaa\xd7\x10\x7e\xba\x12\xad\x95\xec\xe0\x6c\x61\x2c\x53\x03\x58\xe1\x7e\x94\x0e\xc2\x4e\xc6\x9a\xaf\xf8\x1f\x8b\xf9\x2a\xde\x55\x2e\x97\x89\x8b\x8e\x2e\x06\x15\xbf\x93\x4c\x5d\xe6\x63\x73\x54\x99\x21\x0a\xd5\x77\xad\x5c\xfc\x80\xe0\x21\x22\xf5\x28\x5a\x1b\x3c\xfc\x9d\xe8\x0f\x84\xb2\x75\xf5\xe2\x54\x8d\x8b\xb9\x0f\xd5\xb8\x43\x51\x82\x36\xc8\x73\x46\x8c\x53\x31\x8a\xa2\x74\x00\x6a\x65\x8e\xc7\x32\xd0\x9f\xa2\x63\xa2\xdd\xab\x87\x19\x69\x25\xfe\x5e\x33\xf5\xc1\x7d\xb0\xa1\xba\x46\x9a\x13\x86\xa7\x47\xc9\x77\x69\x08\x03\xc2\xe5\x4a\x98\x93\xe2\x63\xaf\xf1\x7e\xcf\x01\x61\x01\x22\xac\xda\x9a\x07\xe4\xa5\x49\xa3\x44\x5e\x4d\x8a\x7a\x7a\xed\xab\xe3\x89\xe4\x5c\x8a\xf7\xf3\x79\x5d\xc9\xaf\xb4\x59\x5b\xda\x9a\x53\xa4\xa4\x34\xb0\x69\xc9\x0e\x82\x85\x14\x26\xd0\xf4\x27\x46\x30\xbb\xc8\xcd\x1b\xdf\xf0\x82\x70\xca\xd6\x11\x8c\xf4\x5a\x1b\xe4\xc1\x8a\x8e\xc6\x10\x90\x3c\x67\x18\x94\xaf\xc6\xf0\x1b\xa3\xe2\xe6\x2b\x49\xe6\xc5\xf3\x27\x29\xcc\x18\x46\x73\x5c\x4a\x84\x3f\x3f\x8f\xc6\xf0\x4d\xc6\xd2\xc8\x31\xfc\x8e\xec\x16\x0d\x4d\xc8\x18\xde\x29\x4a\xd8\x18\x34\x11\x3a\xd0\xa8\xe8\x62\x0c\xa3\x77\x96\x29\xbc\x97\x4c\x2a\xf8\xc8\xe5\x0f\x2b\x69\xc7\xc6\xf3\x66\xbe\xe6\xb1\x64\x23\x17\x76\x51\x25\xda\xd8\xbf\xac\x12\x9a\x12\x78\x2f\x85\x96\x0c\x47\x63\xf8\x2a\x05\x49\xe4\x18\xb8\x14\x52\xe7\x24\xc1\x7e\x26\x77\x48\x97\x99\x89\x40\xd8\x4d\x22\x7b\xf3\xc4\x21\x4c\x2c\xdc\x08\x62\x46\x92\x1b\x97\x49\xbc\xac\x87\xef\x32\x6a\x3c\x32\x0c\xc3\x9a\xe2\xec\xf9\xec\xe5\x65\xfc\xc2\xa5\x51\xf2\x2e\xc0\x5b\x14\x35\xd9\x2d\x51\x4f\xf7\x8c\xcf\x7d\xe4\x32\x4d\x77\x4c\x11\x3b\x52\x8b\xa1\x60\x25\x56\x1a\xd3\x08\xce\x08\xda\xab\x83\x5c\xaa\x14\x55\x45\xcb\x4a\x03\x94\xa2\x9b\xd3\xcf\x3b\xd6\xa8\xba\xbc\x36\x5a\x3f\xd4\x9a\x74\x6f\xa4\x8e\x6e\xae\xbd\xac\xff\x07\x77\x34\x35\x59\x04\xb3\xe9\xf4\x97\x8e\x41\x0b\x82\x94\x18\x72\x9c\xca\x64\x43\x40\xee\x68\xe3\xe5\xb0\x05\xd8\x4d\xa8\xdd\x26\x96\x2c\xed\x25\xb2\x0e\x56\xc6\xdf\x34\x7c\xa5\x90\xf7\xda\xb3\xb9\x1e\x35\x86\xd6\x5a\x37\x80\x6c\xf7\x4c\x7e\xe5\x98\x52\x02\x4f\x73\x85\x0b\x54\xba\x5a\x3c\x9d\x64\xc8\x31\x82\x94\xa8\x9b\x73\x27\x29\xf8\x12\x05\x34\x1d\xfd\x6c\x41\xec\xf5\xc6\x43\xb1\x5f\xc9\xb3\x19\xb1\x97\x8f\xe8\xb8\xd3\x83\xd7\x93\x2f\x5e\xda\xab\x8f\xb2\x19\x22\x67\x97\xaf\xed\xe5\x23\x75\x7c\xff\xd5\xd4\x5e\x5e\x55\x1e\xe4\xff\xd0\xe3\xd8\x67\x2f\xa6\xf6\xf2\x52\x0f\xf7\x46\xe8\xf1\xc8\xb3\x7f\x3e\xb7\xd7\x61\x2c\x27\xf8\x0f\x14\x3e\xb4\xbf\xdb\xdd\x66\x86\x33\xc7\x35\x1a\x15\xa4\x64\xba\x7b\xe1\x30\x3c\xaa\x5d\x4c\x92\x9b\xa5\xb2\x95\x72\x50\xaa\x6b\xe5\xf7\x86\xe8\xf2\x95\xbb\x30\x06\xef\x4d\xa0\x50\xa4\x68\x37\x08\x11\xc8\xdc\x50\x4e\x7f\xe2\x17\x5c\xd2\x98\x32\x6a\xd6\xde\xf0\x29\x37\xb0\x6d\x8d\xab\xc4\x52\x8a\x6c\x64\x24\x57\x9d\x9d\xc1\x19\xc9\x35\x46\x50\xdf\xb5\x04\xed\x25\x65\x63\x30\xa9\x23\x8a\x51\x81\x41\x56\xe5\x91\x59\x78\x71\x59\x64\x88\x26\x45\x4e\xd2\xb4\x50\x68\x5a\x8e\xc2\xac\x43\xd2\xac\xf1\xfe\x41\xb7\xc0\xf9\x0c\x91\x85\x45\xdc\x5a\x90\xe5\x9d\x03\xb5\x03\x64\xda\xc3\xc7\xb5\xa6\xad\x8b\x41\x51\x81\x2d\x80\x3b\x45\xf2\x37\xdd\x95\x23\x8c\x2e\x45\x04\x0c\x17\x4e\x8f\x72\x8b\xca\xb6\x13\xac\xa6\x88\xa5\x31\x92\xfb\x45\xbb\xd6\x75\xe7\x1a\x99\xf7\x60\x46\x92\x76\x91\xf7\xf9\xab\x1b\x9f\x87\xe2\xa0\x1d\xfb\x3e\x0f\x6f\x86\x56\xa7\x6a\xf8\x26\xd4\x8b\xe9\x4c\x29\x5f\xfb\x8b\x44\xb8\x2f\x9b\xc7\x7d\x7d\x5f\x5c\x0f\x32\x93\x69\x0a\x46\x45\xc2\xea\x96\x51\x96\x3e\xbd\x10\xe7\x60\xd2\x71\x6b\xdc\xf6\xb6\x1e\xaa\xa1\x96\x6e\xe7\xfd\x53\xe1\x04\xb3\x61\x80\x0a\xba\x53\x20\x1d\x29\xc9\x95\x3c\x4e\x8c\xa2\xf7\x60\xd2\x48\x48\xf3\x34\x62\x44\x9b\x52\xe4\xf9\xd8\x25\xc9\x3a\x24\xfe\xe0\x0b\x54\x95\x29\x5a\x61\xde\x14\x5d\x72\x0c\x7c\x01\xdc\xdb\x2f\x15\x01\x28\x6f\x51\x2d\x98\xbc\x8b\x00\x19\xa3\xb9\xa6\xba\x4d\x54\x8f\x07\xf7\x11\x64\x34\x4d\x51\x1c\x8e\x53\x4e\xd3\x94\x61\x8f\x7d\x32\xeb\x5f\x1d\x7c\xed\x44\xd1\xce\x54\x0d\x05\x5e\xbf\xfe\xc5\xcf\xb6\x90\x1c\xd8\x14\xe2\x70\xee\xcf\x30\xdd\xe9\x85\x85\x0f\xcc\x2f\xc6\x7b\xd4\xf2\x18\xbd\x9d\x0c\xf6\x8d\xd1\xa1\xc0\xee\xf6\x93\xcd\x0c\x1f\x4e\x7b\x17\x3f\x2e\x0e\x54\x35\x5c\xfb\xb1\xb4\xb8\xbc\xec\x54\x0a\x4e\xd4\x92\x8a\xa0\x4c\xb0\x11\x84\x97\xbd\x72\xaa\x96\xe3\x90\xaa\xad\x5d\xc2\xc0\x3e\xc0\xed\xaa\xce\xbd\xcb\x4f\x56\x46\xfa\x0a\x71\x04\xcf\xf3\x7b\xd0\x92\xd1\xd4\xe5\xd7\xe8\x8c\xce\x7d\x3a\x47\x30\x85\x29\x3c\xef\x2f\x6a\x3b\x8d\x3b\x25\x66\x57\x15\x0f\x9a\x2b\x36\xc5\xa1\xc3\xc6\x67\x6f\x23\xf3\x43\x01\x6d\xf3\xcd\x8e\x81\xed\x21\x9c\x37\x2e\xa0\x4a\xd9\x92\xab\x63\x90\x6e\xcb\xdb\x93\xc0\x12\xc9\x76\x22\xc6\xed\x47\xbf\x38\x1b\x55\x7f\x41\x5e\x71\xa0\x62\xb3\x22\xe5\x5e\xa7\x6d\x77\x81\xee\xee\x7f\x40\x91\x74\xb6\xfa\xe7\xfd\x1d\x88\x13\xdf\x70\xac\x83\xe9\xa8\x11\xd8\x66\x02\x55\xa5\x4d\xf5\x34\x3c\xa1\x1c\x15\xd8\x51\xb1\x9d\x2e\xda\x09\x89\x63\xdf\xc2\x0d\x48\x4c\x1d\x56\x0f\xe4\x73\x02\xe2\x32\x83\x79\x03\xa5\x0c\xd2\x8b\x43\x41\x6a\x88\x32\x41\x4a\xac\x27\x95\xf7\x16\x75\xf1\x20\xf3\xc0\xe3\x5b\x9c\x8a\xfa\x14\xa1\x9b\x0e\x87\x2d\xc2\x2d\x51\x94\x08\x13\x88\x15\x47\x45\x93\xc8\x6e\x28\x56\x8c\x28\xfb\x42\xfb\x61\x0a\x69\x50\x8f\x21\x4c\x51\x27\x8a\x16\xe7\x99\xee\xb1\x1d\xd7\x41\xb6\xce\x33\x14\xda\x97\xef\x82\x3b\x8c\x6f\xa8\x39\x44\xd2\x33\xd4\x84\xd1\xfa\xa6\xec\x00\x90\x39\x49\xa8\x59\xdb\x5e\xff\xb2\x39\x1b\x8a\x43\xca\xea\xe0\xb1\x7c\x2a\x1e\xa0\x38\x84\x78\x3b\xca\x15\x15\xa6\x71\x64\xfc\x6b\x4e\x96\x1d\xa3\x57\xab\x39\xbb\xe4\x1c\x2e\xa6\xdc\x9f\xf7\x8a\x3e\x6d\xf0\x61\x66\x73\x07\x3b\x3b\x50\xf5\x5e\xf5\x4d\xba\x18\x43\xf6\x7c\x0c\xd9\x8b\x03\x93\x5f\xf4\x4c\x3e\xb0\x85\xec\xf6\x5a\xd6\x20\x41\xac\x90\xdc\x04\x54\x68\x9a\x62\x04\xe4\x56\x52\x7f\x38\x18\x37\x6f\x1c\x9f\xed\x50\x91\x85\xb1\x95\xb1\xd7\x0b\xca\x9d\x4f\xaf\x90\x18\x17\x52\x0d\x16\x72\x90\xe8\x00\xde\x94\xea\x9c\x91\x75\x54\x5a\xb2\xca\x98\x81\xed\x10\x7a\xb6\x6b\x1e\xe7\x78\x24\xd0\x4d\x29\x8b\xee\x31\xd9\xc9\x52\x86\x6b\x6d\xab\x7a\xbf\xca\xc7\x5a\x3b\x1f\xb0\x4e\x52\x18\xa0\x3d\x34\x03\xdc\xf7\x15\x62\xa5\x8d\xe4\x8d\xaf\x10\xd5\x9f\x50\xb4\x3f\xce\xbc\xaf\xa9\x9a\x1f\x3a\x9c\xcf\x15\xe5\xe4\xb0\xf5\x29\xa4\x41\xb2\x93\x7d\x5c\xc8\x27\xca\xf0\xa8\x20\x2a\x18\x15\xf8\x7e\x3e\x87\xa3\x22\xab\xdf\xff\x05\x00\x00\xff\xff\xbb\x07\x0d\x9c\x63\x26\x00\x00")

func bindataReportsHtmlCommonsGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlCommonsGohtml,
		"reports/html/commons.gohtml",
	)
}



func bindataReportsHtmlCommonsGohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlCommonsGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/commons.gohtml",
		size: 9827,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1658147394, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlDefaultGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x5d\x8f\xa3\x36\x17\xbe\xcf\xaf\x38\x2f\x9a\x8b\x99\xd5\x0b\x68\xee\x56\x2b\x26\x52\x77\xa6\xdb\x56\xda\x6d\xa5\x49\xb6\xbd\x76\xc0\x09\xee\x02\x4e\xb1\xd9\xd9\x08\xe5\xbf\x57\xb6\xc1\x60\xb0\x09\xc9\xa4\x5a\xb5\x57\x09\xd8\x3e\x1f\xcf\xf9\x7a\x9c\xd4\xb5\x0f\xe1\x9b\x1d\xe5\x87\x3d\x7e\x07\x3b\xc2\xd3\x6a\x13\xc4\x34\x0f\xff\x44\x05\xa3\xe5\x2e\xe4\x34\x0f\x77\xd4\x17\x1f\x25\xde\xd3\x92\x07\xcf\x98\x55\x19\x7f\x5f\xc5\x5f\x30\x7f\x13\x82\x7f\x3c\x2e\x16\x75\x9d\xe0\x2d\x29\x30\x78\x6b\xb4\xc9\xb0\x5a\xf4\x8e\xc7\x05\x00\xc0\x75\x74\x28\x49\x37\x1b\xf9\x0e\xde\x3d\x40\xd0\xbd\x64\x29\x7d\xf9\xf1\x1b\x8a\xe5\x7b\x25\xe2\xb7\x3d\x27\xb4\x60\xc1\xaa\x5d\x7a\xaa\x4a\x24\x5f\xc1\xe0\x5c\xbe\xe7\x87\xf1\xb9\x67\x65\xc8\xaa\xdd\x21\xbc\x3c\xd7\x99\x94\xe7\x99\x92\x1a\x36\x62\x4d\x5f\xe8\x9e\xb3\x91\x66\x68\x35\x45\x5c\x40\x09\x71\x86\x18\x7b\xf0\xe4\x83\x4f\x93\xc4\x5b\xca\x55\xb5\x23\xc5\x28\xe9\x3f\x97\xdd\x43\xb3\x41\x9f\x4f\xfd\x17\x92\x60\x6f\x19\xb1\x3d\x2a\xf4\x5b\xc2\x33\xec\x2d\xeb\x3a\x58\x8b\x6f\xc7\x63\x14\x8a\xe5\x65\x14\xf2\xd4\x14\x55\xd7\x64\x0b\xd2\x62\x89\xc9\x0a\x65\x98\x35\x9e\x38\x34\xe6\xb4\xc0\x07\x5f\x58\x88\x4b\xa1\x82\xdc\xbf\x2d\xc0\xfb\x21\xa7\x55\x21\x52\x43\xaa\x80\xba\xc6\x45\x32\x90\x33\x50\xf5\xb9\x58\x97\x28\xfe\x82\x87\xdb\x86\x0e\x92\x1c\x8f\xb4\x3d\x21\x92\x1d\xa0\x2a\x7c\xae\x44\xb4\x7a\x07\xfa\x4e\xda\xf0\x5a\x0b\xce\x55\x7f\x52\x6a\x93\xcc\x0e\x81\xc2\x76\x5d\x13\x16\xa3\x67\x06\x73\x56\x40\x55\xdd\x21\x23\xac\x16\x85\x63\x1f\xe7\xf8\xa9\x84\x27\xd3\xde\x9a\xa2\xa3\xb0\x5f\x05\x62\xff\xa0\x46\x36\x34\x39\x74\xcf\x75\x5d\xa2\x62\x87\xa1\x69\x2c\xc1\x63\x4a\xb2\x44\x35\x9e\x21\x24\x12\x35\x5a\xc2\x6d\x41\x39\x04\xb2\x2b\xac\x68\x55\xc6\xf8\x0e\xba\x4e\x62\x75\xb2\x1c\x23\xa2\x16\x12\xa3\xf4\x78\xb2\x5c\x58\x37\x9e\x15\xaf\xc4\x88\x97\xc0\x92\xe3\x7c\x9f\x21\x8e\x41\xbd\xfa\x48\x18\xf7\x20\x90\x52\x82\x67\x5a\x15\x89\xc8\x6c\xa5\xde\xae\xdd\x1e\x3c\x8b\x65\x53\xb5\x3a\xb0\x4e\xc4\xdb\x34\xae\x29\x92\x5f\x8a\x2d\xf5\x20\xf8\x09\x73\x59\x3b\x3d\x91\x57\x31\xf1\xea\x06\x9e\x61\xde\xf9\x2a\x75\xea\x43\xd0\xd6\xfc\x8c\x4c\x99\xaa\x7d\x07\x2c\x53\x39\x05\x17\xe4\x55\xa3\xde\x8d\x09\x9c\x08\x9b\x03\x9a\x9c\x14\x2d\x10\x1d\x24\x22\x16\x27\x15\x3a\x7b\x50\x38\xac\xcf\xe1\x4e\x4b\x8b\x31\x9b\x48\xc4\xb7\x94\x72\x63\x10\xb7\x76\x97\xf4\xc5\x67\xd5\x86\x53\x8e\x32\x6f\x34\x9d\x75\xa3\x5b\xcb\x75\x77\x37\x9f\x8c\xd3\xb0\x47\xc3\xb0\x53\x5b\x03\xd5\x76\xbc\x71\x1f\x10\x66\xcd\x1f\xcb\x30\x7b\x76\x39\x2a\xa9\x35\xc4\x5e\xf1\x17\x0f\xeb\xab\xdb\x75\xa6\x55\x03\x7d\x30\x50\xda\x4f\xe4\x56\x53\x3f\x9f\xff\xd1\xc9\x7e\x8d\x8c\xe9\x0a\xce\x9e\x2f\x57\xc0\xa0\xaf\xe2\xbc\xa1\xdf\xd5\x63\x14\x4a\xea\xbc\x5c\xe8\x26\xdc\x5d\x56\x3e\x21\x5e\x92\x6f\xff\xe1\xdb\x8a\xed\x0e\x91\x20\x8e\x40\x5f\x27\x9a\x6f\xb9\x44\xe2\xc2\xbb\x85\x3a\xec\x37\x97\x89\x8b\x2f\x18\x2f\x84\xa7\x3a\x0d\x3e\x90\x92\xf1\x5f\x69\x21\xdd\x91\xa4\xcc\x9a\xed\xd7\x8a\x95\x29\x55\x51\xc2\x29\x2e\xe8\x48\xf0\x5e\x6e\xf7\x68\xdd\x4c\x42\x7c\xc9\x45\xc0\x3e\x37\xfe\x55\x1c\xd8\x9e\x46\x20\x3f\x1e\xbc\x0e\xc8\x31\xa8\x8e\x31\x3f\x3f\x7a\x60\xe3\x18\xce\x9d\x4a\xfa\x98\x9b\xfd\x41\x78\x2a\x8b\xd6\x20\x69\x6e\x85\x97\xd2\x44\x0d\x54\x4c\x33\xcd\x29\xa0\xeb\xab\x9a\x66\xd8\xb0\x9b\xe0\x60\x4e\x4a\x35\xc9\x1e\x7d\x30\x66\x91\xb5\x92\x0c\xfb\x37\xa5\xd9\x1a\xea\x1a\xac\x97\x3c\x38\xaa\x58\x9f\x66\x7a\xb2\x93\x5c\x44\x2e\xed\x45\xf9\x3d\x99\xa0\xbd\x97\xce\xa1\x87\x4d\xed\x92\xff\xdf\xc4\x22\xe3\xc5\x70\x70\x37\xd1\x53\x55\x51\xd7\x37\x6d\x20\x84\x20\x56\xe5\xf2\xc0\xef\x28\xab\x30\x6b\xe5\xc2\x0d\x99\x3b\xeb\x1d\x0e\xeb\x33\x32\x84\x75\x7d\x6b\x30\x81\xa4\x17\xec\xbb\xe9\x40\x9f\x97\x87\xaf\xca\x41\xc3\xac\x19\x39\x38\x71\xdf\xb8\xf8\x17\x20\x70\x94\xbe\x0b\xe3\x39\x34\xd3\x3a\x55\xe7\x61\xfa\x3a\x3c\xa7\x08\x9f\x1d\x56\x2b\x50\xd3\x93\x6f\x1e\x11\xfc\x2e\x14\xf0\x4c\x2a\x97\x90\xaf\x2d\xcc\x4a\xa6\xd7\x9f\xe0\x64\x0b\xa8\x48\x2c\x74\x52\x71\x5c\xf9\xb3\x3c\x83\x5b\xc2\xd4\xb3\x2e\x65\x39\xc8\x3b\x7b\xee\xee\x46\x03\xbf\x1b\x78\x06\x5d\xd6\x12\xcc\xf6\x98\x31\x2c\x92\x07\xff\xd5\xc5\x17\xef\x79\x0a\xf7\xc3\xeb\x58\x5f\x70\xff\x4f\x83\xf6\xdc\x48\xac\x8d\x89\x04\x2e\xbe\xa1\x01\xb9\x9d\x46\xf7\xae\x61\x32\x4f\x88\xe3\x67\xd1\x48\x95\xc4\x21\x0a\x3a\xa1\x7a\x41\x90\x2d\x1a\x64\xf7\x95\xd4\x44\x8b\x10\xf9\x9b\x90\xaf\xb3\x49\xdf\xd8\x37\x7b\xbc\xd9\x54\x13\x3d\x45\xb8\xaf\xc2\x95\xfa\x31\x6b\xc3\x15\x38\x7f\x76\x73\xb5\xbf\x11\x36\x53\x53\xb6\xd9\xae\x6b\x36\xfa\x5f\x42\x63\x51\x98\x90\xf2\x3c\x5b\x2e\x22\xf1\x01\x19\x2a\x76\xb2\xfb\x88\x2f\xef\x11\xc3\x20\x39\x4f\xd4\xf1\xde\x28\xc7\x1c\x41\x9c\xa2\x92\x61\xfe\xe0\x7d\x5e\x7f\xf0\xdf\x36\x78\x36\x37\x0f\x33\x51\x1e\x2b\xc6\x69\xde\x60\xd8\x1b\xe7\xe2\xc5\xb2\xae\x21\x00\x39\x8d\xe5\xe3\x02\x86\xe4\xad\x0f\x54\x4c\xf3\x9c\x16\x8f\xab\x55\xd7\x5e\x7a\x8b\x52\x4d\xb3\x18\x85\xca\xde\x48\x71\x8a\xc5\x55\xfe\x6b\x9a\xfc\x9f\xa9\xbd\x74\xc9\x1f\x0c\x7a\x2e\xb7\xc5\x1a\xa5\xf7\x22\x95\x84\xab\xe9\xbd\xd1\x39\x47\xe7\x9e\x30\x8b\x4b\x22\x65\xeb\xd3\xfb\x36\x2b\x93\x6e\x51\xe4\x26\x43\x5b\xfc\xf3\xfa\xd3\x47\x90\x92\xf7\x86\x60\xf3\xf7\x8b\x2a\xcf\x51\x79\x00\x0b\x72\xcd\x92\x07\x4d\xef\x95\xae\x2a\x29\xd6\x34\xd5\xbb\xa2\x50\xc1\x1b\x49\xcc\x96\x7f\x07\x00\x00\xff\xff\xb9\x68\xd8\x77\x02\x1d\x00\x00")

func bindataReportsHtmlDefaultGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlDefaultGohtml,
		"reports/html/default.gohtml",
	)
}



func bindataReportsHtmlDefaultGohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlDefaultGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/default.gohtml",
		size: 7426,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1629542127, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlTimelogGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x57\xdd\xae\xa3\x36\x10\xbe\xcf\x53\x4c\xd1\x5e\xec\x1e\x29\xa0\xd3\xaa\xd2\x6a\xc5\xc9\xc5\x9e\x9f\xb6\x52\xff\xb4\x49\x1f\xc0\xc1\x93\xe0\x2e\xb6\x91\x3d\xec\x69\x84\xf2\xee\x95\x6d\x20\x90\x00\xc9\xd9\x9b\x00\x1e\xcf\x37\x7f\xdf\xd8\x93\xba\x5e\x42\x72\xb7\xd7\x74\x28\xf1\x13\xec\x05\xe5\xd5\x36\xce\xb4\x4c\xfe\x65\xca\x6a\xb3\x4f\xf6\x9a\x84\xc4\xf6\x61\xb0\xd4\x86\xe2\xcf\x55\xf6\x15\xe9\x8b\xff\xb8\x4b\x60\x79\x3c\x2e\x16\x75\xcd\x71\x27\x14\x42\x14\xa4\xd1\xf1\xb8\x00\x00\xb8\x6a\x81\xb4\x4c\xf6\x7a\xe9\x1e\x0d\xfc\x17\xb4\x55\x41\x01\xa6\x81\x0f\x48\xef\xb6\x7e\x0d\x3e\x3d\x40\x7c\x5a\xb4\xb9\x7e\x7d\xfe\x8f\x65\x7e\x3d\x40\xfc\x55\x92\xd0\xca\xc6\xeb\x56\xf4\x54\x19\xe6\x97\xe0\x4c\x4f\x96\x74\xb8\xd4\x0b\xa1\x05\x75\xb7\x63\xa8\xb4\x26\x5d\x6e\x84\xc4\x59\xbd\x6e\x93\x4b\x8e\x53\x4e\xb9\xf8\x06\x59\xc1\xac\x7d\x88\x42\x1c\xd1\xca\x0b\x02\xb2\xd8\x41\x13\x5e\xdc\x37\x39\xd8\xa0\x0d\xbc\x57\x9a\x86\x1b\xd7\xba\x32\x19\x7e\x80\x53\x3c\x67\xaa\xde\x38\xb1\x6d\x81\xad\x79\xff\xb1\xe4\x8c\x18\x84\x57\xcd\x79\xcf\x99\xa1\x62\x8e\x8c\x4f\xc9\xcc\xb8\x20\x38\x9c\xdc\xa1\xdc\x22\xe7\xc8\x81\x04\x15\x08\xa4\xe1\x2b\x62\xd9\x7c\x31\xc5\x83\x75\x0b\xa4\xf7\x48\x39\x1a\x10\x0a\x4a\x23\x14\x21\x87\xbf\x9f\x5e\xec\x5d\x32\x12\x4a\xcf\x33\xc8\x74\x61\x4b\xa6\x1e\xa2\x9f\xa3\x2e\x36\x07\x1e\xad\x3a\xb2\xc4\x1b\xb7\x70\x3c\xa6\x09\xe5\x13\x61\x24\x53\x71\xcc\x06\xe8\xed\x07\x9b\x9c\x11\x2e\x5d\x9e\xd0\x38\xcb\xe2\xfe\xa3\x82\xe8\x89\x11\x46\x73\x76\x6f\x01\x59\x13\x33\x74\x15\x25\xb0\xa7\x4f\xcd\xe3\xf1\x1a\xf2\xb3\xe2\x2d\x6e\x5d\xa3\xe2\xd7\x32\xdd\x66\x57\x8e\x44\xda\x34\xd7\x5b\xa2\xa5\x7c\xf9\x2a\x38\x9e\x40\xfe\xd4\x84\x76\x16\x61\xa6\x4e\xc9\x2c\x4b\xb7\x9a\x1f\xc6\x65\x75\x6d\x98\xda\x63\xd7\x50\x2f\x86\x49\xb4\xcd\x63\x36\x23\x33\xc4\x08\x1b\x78\x1b\xa9\x75\x25\x5c\x72\x76\x70\xb1\xee\xb4\x91\x8c\x1c\x35\x20\xf6\xb5\xf5\x01\x4f\x78\x3e\x09\xe6\xaa\x70\x42\xf3\xa7\xcc\xed\x68\x63\x64\x99\x55\xb8\x70\x41\x97\x8d\x07\x57\xd5\xbc\xad\xf8\x37\xeb\x2c\x95\x38\xc7\xb1\x51\x2d\xa1\xf6\x05\x3e\xb1\xb1\x03\x6d\x5a\xb7\x9f\x94\xe7\x59\x5e\x0f\xf5\xb0\xb0\xb7\x64\xe2\xdc\x90\xab\xe5\x77\x18\xbb\x69\xef\xad\xfb\x6e\x29\xfa\x75\xa4\x5e\x8d\x5b\x82\x49\xa1\xda\xe6\x86\xf7\x46\x57\x8a\x23\xef\x16\xe2\xee\xad\x69\x9f\x0f\x6f\x24\xb3\xf2\x2d\xbf\xaa\xeb\xd8\x37\xff\x35\xed\xe9\xfe\x9f\x8b\x2e\x4d\x66\xfa\x3f\xa5\x9d\xd6\xd4\x31\xbb\xda\x92\x26\x56\x4c\x5e\x85\xa6\xdd\x69\xf4\xeb\xf2\xca\x6e\x38\xbf\xa2\xc6\xfa\xee\xa7\x96\x76\x3f\x36\x21\x9c\xce\xc3\x8d\xc7\x7e\xc3\x89\x9a\xe9\xa2\xf3\x09\x5c\x01\xfd\x4f\xcf\xcd\x61\x39\xbb\xea\xc5\xbf\x20\xdd\x60\x66\xf5\x9d\x07\xb3\x4b\xf0\xa5\x30\x4d\xfc\xd5\xbf\x3a\x9b\x71\x86\x65\x1c\xed\xc9\xfe\x18\x35\x7d\xd7\x73\xf1\xed\x1c\x7b\x78\xd2\x3f\xe6\xa2\xe0\x61\xc4\x1c\x3b\xe8\xeb\x9a\x50\x96\x85\x3b\xa7\xdb\x79\xb6\x1b\x39\x67\xdc\xed\xbe\x1b\x0f\xda\xa5\xc5\x5b\xa6\xe0\x9c\x64\x11\xc6\xca\xa4\x99\x2b\x9b\x21\xb8\xae\xdf\xe9\x92\xec\xc5\xd8\xe9\x47\xcc\xf4\x07\xae\x33\x07\x0f\x4e\x7f\xb5\x48\xdd\x03\x0a\xa6\xf6\x8e\x7a\xfe\xe5\x33\xb3\x6e\x1c\x8d\x9c\xb0\xbb\x2e\x53\x89\xc4\x20\xcb\x99\xb1\x48\x0f\xd1\x3f\x9b\x97\xe5\xc7\x86\xd2\x75\xfd\x2a\x28\x07\x6f\x34\x7e\xac\x2c\x69\xd9\x24\x78\x71\x22\x86\x5b\x70\x2d\xec\x29\xe4\x3f\x16\xfd\x64\x2c\xce\xb3\x99\x69\x29\xb5\x7a\x5c\xaf\x4f\x7f\x10\x7a\x42\x6f\xa4\x11\xa6\x49\xf0\x32\x0d\xfd\xbb\x98\x72\xa7\x1d\xe9\xd3\xfc\xbe\x75\x24\xbf\x1f\xe4\xfe\x42\xef\x09\x6d\x66\x84\xcf\x5e\xa7\x5d\x76\xe3\xd2\x49\xe8\xb8\x65\xd9\x0e\x7f\xdd\xfc\xf1\x3b\x78\xe4\x72\x00\xec\x3a\xda\xc3\xfa\x89\xbf\x92\x92\x99\x03\x8c\xc4\xd5\x88\x22\x68\xfe\xdb\xf8\x62\x76\x28\x23\x54\xeb\xb6\xa5\x49\x88\x3e\xf5\xb4\x58\xfd\x1f\x00\x00\xff\xff\x3a\xcd\xb5\xcf\xb0\x0d\x00\x00")

func bindataReportsHtmlTimelogGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlTimelogGohtml,
		"reports/html/timelog.gohtml",
	)
}



func bindataReportsHtmlTimelogGohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlTimelogGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/timelog.gohtml",
		size: 3504,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1658141236, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"reports/html/commons.gohtml": bindataReportsHtmlCommonsGohtml,
	"reports/html/default.gohtml": bindataReportsHtmlDefaultGohtml,
	"reports/html/timelog.gohtml": bindataReportsHtmlTimelogGohtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"reports": {Func: nil, Children: map[string]*bintree{
		"html": {Func: nil, Children: map[string]*bintree{
			"commons.gohtml": {Func: bindataReportsHtmlCommonsGohtml, Children: map[string]*bintree{}},
			"default.gohtml": {Func: bindataReportsHtmlDefaultGohtml, Children: map[string]*bintree{}},
			"timelog.gohtml": {Func: bindataReportsHtmlTimelogGohtml, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
