// Code generated by go-bindata. DO NOT EDIT.
// sources:
// reports/html/commons.gohtml (10.317kB)
// reports/html/default.gohtml (7.426kB)
// reports/html/timelog.gohtml (3.504kB)

package tom

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _reportsHtmlCommonsGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x6d\x6f\xdb\x38\xf2\x7f\xdf\x4f\x31\x70\xfe\x0b\x34\x81\x65\x3b\x69\xd3\x7f\xab\xa6\xc1\x76\xfb\x70\x5b\xa0\xbd\x3d\xd4\x5d\x1c\x70\xef\x28\x71\x6c\xb1\xa1\x48\x81\xa4\xe2\xb8\x86\xbf\xfb\x81\x7a\xb0\x25\x8a\xb2\xe5\x6c\xb1\x2f\xae\x02\x6a\x89\x1c\xce\xfc\x66\x38\x4f\xa2\xb2\xd9\x50\x5c\x30\x81\x30\x4a\xa5\xc0\xf5\x67\xa6\xcd\x68\xbb\x7d\x02\x00\xb0\xd9\x28\x22\x96\x08\x93\xea\xb9\x1c\x5b\x48\x95\x12\xf3\xc5\x12\xdb\x99\x9b\x48\xdd\x56\xd4\x28\xe8\x76\xfb\xa4\xfe\x7d\xb2\xe7\x4c\x73\x45\x0c\x93\x62\xcf\x78\xc5\x4c\xe2\xf0\x0d\x60\x7a\xb1\x94\x66\x9d\x61\x08\x4b\x66\x92\x3c\x9a\xc4\x32\x9d\x7e\x27\x42\x4b\xb5\x9c\x1a\x99\x4e\x97\x32\xb0\x3f\x94\x18\xfc\xc6\x52\x9c\xbc\xaf\xf8\xce\xf3\xf4\x62\x0a\x41\x8b\x1d\x5b\xc0\xe4\x93\xfe\x2a\x73\x41\x91\xfe\x07\x95\x6c\xcc\xda\x7f\x37\x3a\x23\x02\x62\x4e\xb4\x7e\xb3\x03\x18\xfc\x40\x25\x47\xb7\x9b\x4d\xca\x44\xcd\x1c\x26\xff\x40\xb3\xdd\xde\x4c\xed\x82\xdb\x86\x04\xe4\x1a\x7d\x4c\x87\x2e\x2f\xac\x34\xd0\x72\xff\x66\x26\xf9\xf0\x40\xe2\xc6\xde\xfc\x9f\x4e\xe4\xaa\x18\x83\xf0\x0d\x28\xcc\xa4\x32\x7f\x64\x96\x58\x4f\xe6\xf5\x54\x8d\x42\x83\xe5\xfb\xbf\x62\xfb\x1a\x34\x5b\x40\xc3\x0a\x81\x23\xa5\x90\x14\xa9\xdb\x9f\x23\x6d\xbf\x5d\x3f\x61\xf7\xff\x82\x02\x9b\x0d\xb0\xcb\x97\x02\x46\x95\x79\x61\x17\x5c\xb0\xdd\xfa\x14\x2a\x78\x0f\xd6\x6a\x88\x53\x1a\x45\xe2\x3b\xa4\x9f\xc4\x42\xfe\xec\x88\xb6\xff\x7d\x10\x46\xad\xe7\xa8\x18\xea\x8e\x67\x4d\x2f\x1c\x05\xbf\x30\xb1\xdd\x5e\x4c\x8f\x10\x91\x87\x0e\x51\x8b\xe0\xed\xfd\xf2\xb8\xda\xf3\x3c\x4d\x89\x5a\xef\x55\x3e\xa2\xdf\x52\x1a\x96\x62\xfd\x53\x06\xe8\xe4\x2b\xea\x9c\x9b\xdf\xf2\xf8\x0e\x4d\xa5\x5d\xc1\xed\xc6\x90\x88\x63\xbd\xc9\xba\x12\xb5\xdf\xae\x1b\x13\x49\xba\xbe\x6d\x05\xd9\xe4\x93\xfe\x97\x92\xdf\x31\xae\xf8\xb9\xee\x68\xd4\x6d\xd7\x9f\x0c\xbd\xdd\x6c\x4a\x0f\xaa\x16\x8f\xac\x73\x18\xea\xa5\xad\x01\x19\x66\x38\x5a\xef\x9a\x7c\xb3\x77\xbe\x15\x37\xd3\xa6\xbc\xae\x6b\xb1\x05\x08\x69\x9c\x44\xf5\xb5\xb4\xca\x7b\x62\xf0\x23\xe3\x06\xd5\x57\x5b\x71\x26\x1f\xd2\xcc\xac\xe1\x54\x7d\xac\xf3\x40\x51\xb2\xc2\x61\x3a\xa5\x18\x14\xe4\x56\xb1\x41\xb8\xbe\x30\xc1\x52\xc2\xe7\x46\x31\xb1\x1c\x64\x04\xae\x11\x2a\xcd\x0b\x6e\x0d\xfd\xfe\x56\xf5\x1a\xc2\x4f\x57\xa2\xb5\x93\x1d\x9c\x2d\x8c\x65\x6a\x00\x2b\xdc\x8f\xd2\x41\xd8\xc9\x58\xf3\x3c\xfd\x63\x31\xcf\xa3\x5d\xe5\x72\x99\xb8\xe8\xd8\x62\x50\xf1\x3b\xc9\xd4\x65\x3e\x36\x47\x95\x19\xa2\x50\x7d\xd7\xca\xc5\x8f\x08\x1e\x22\xa8\x47\xd1\xda\xe0\x93\xdf\x89\x7e\x4f\x18\x5f\x57\x03\xa7\x6a\x5c\xac\x7d\xac\xc6\x1d\x8a\x12\xb4\xc1\x34\xe3\xc4\x38\x15\xa3\x28\x4a\x07\xa0\x56\xe6\xf8\x59\x06\xfa\x53\x74\x4c\xb4\x1b\x7a\x9c\x91\x72\xf1\xf7\x9a\xa9\x0f\xee\xa3\x0d\xd5\x35\xd2\x9c\x70\x3c\x3d\x4a\xbe\x49\x43\x38\x90\x54\xe6\xc2\x9c\x14\x1f\x7b\x8d\xf7\xef\x1c\x30\x29\x40\x4c\xaa\xb6\xe6\x11\x79\x69\xda\x28\x91\x37\xd3\xa2\x9e\xde\xfa\xea\x78\x2c\xd3\x54\x8a\x77\xf3\x79\x5d\xc9\x6f\xb4\x59\x5b\xda\x9a\x53\xa8\xa4\x34\xb0\x69\xc9\x0e\x82\x85\x14\x26\xd0\xec\x07\x86\x70\x79\x95\x99\xd7\xbe\xe9\x05\x49\x19\x5f\x87\x30\xd2\x6b\x6d\x30\x0d\x72\x36\x1a\x43\x40\xb2\x8c\x63\x50\x0e\x8d\xe1\x37\xce\xc4\xdd\x17\x12\xcf\x8b\xe7\x8f\x52\x98\x31\x8c\xe6\xb8\x94\x08\x7f\x7e\x1a\x8d\xe1\xab\x8c\xa4\x91\x63\xf8\x1d\xf9\x3d\x1a\x16\x93\x31\xbc\x55\x8c\xf0\x31\x68\x22\x74\xa0\x51\xb1\xc5\x18\x46\x6f\x2d\x53\x78\x27\xb9\x54\xf0\x21\x95\xdf\xad\xa4\x1d\x1b\xcf\xc8\x7c\x9d\x46\x92\x8f\x5c\xd8\x45\x95\x68\x63\xff\x9c\xc7\x8c\x12\x78\x27\x85\x96\x1c\x47\x63\xf8\x22\x05\x89\xe5\x18\x52\x29\xa4\xce\x48\x8c\xfd\x4c\x56\xc8\x96\x89\x09\x41\xd8\x97\x44\xfe\xfa\x89\x43\x18\x5b\xb8\x21\x44\x9c\xc4\x77\x2e\x93\x68\x59\x4f\xaf\x12\x66\x3c\x32\x0c\xc7\x9a\xe2\xec\xd9\xe5\x8b\xeb\xe8\xb9\x4b\xa3\xe4\x2a\xc0\x7b\x14\x35\xd9\x3d\x51\x4f\xf7\x8c\xcf\x7d\xe4\x92\xd2\x1d\x53\xc4\x8e\xd4\x62\x2a\xc8\x45\xae\x91\x86\x70\x46\xd0\x5e\x1d\xe4\x52\x51\x54\x15\x2d\x2f\x0d\x50\x8a\x6e\x2e\x3f\xef\x58\xa3\xea\xf2\xda\x68\xfd\x50\x6b\xd2\xbd\x91\x3a\xba\xb9\xf6\xb2\xfe\x1f\xac\x18\x35\x49\x08\x97\xb3\xd9\x2f\x1d\x83\x16\x04\x94\x18\x72\x9c\xca\x24\x43\x40\xee\x68\xa3\xe5\xb0\x0d\xd8\x2d\xa8\xdd\x26\x92\x9c\xf6\x12\x59\x07\x2b\xe3\x6f\x36\x79\xa9\x30\xed\xb5\x67\x73\x3f\x6a\x0c\xad\xbd\x6e\x00\xd9\xee\x99\xfc\x9a\x22\x65\x04\x9e\x66\x0a\x17\xa8\x74\xb5\x79\x3a\x4e\x30\xc5\x10\x28\x51\x77\xe7\x4e\x52\xf0\x25\x0a\x68\x3a\xfa\xd9\x82\xd8\xeb\xb5\x87\x62\xbf\x93\x67\x97\xc4\x5e\x3e\xa2\xe3\x4e\x0f\x5e\x4f\xbe\x7a\x61\xaf\x3e\xca\x66\x88\x9c\x5d\xbf\xb2\x97\x8f\xd4\xf1\xfd\x97\x33\x7b\x79\x55\x79\x94\xff\x43\x8f\x63\x9f\x3d\x9f\xd9\xcb\x4b\x3d\xdc\x1b\xa1\xc7\x23\xcf\xfe\xff\x99\xbd\x0e\x63\x39\xc1\x7f\xa0\xf0\xa1\xfd\xdd\xee\x36\x31\x29\x77\x5c\xa3\x51\x41\x4a\xa6\xbb\x01\x87\xe1\x51\xed\x22\x12\xdf\x2d\x95\xad\x94\x83\x52\x5d\x2b\xbf\x37\x44\x97\x43\xee\xc6\x18\x7c\x30\x81\x42\x41\xd1\xbe\x20\x84\x20\x33\xc3\x52\xf6\x03\x3f\xe3\x92\x45\x8c\x33\xb3\xf6\x86\x4f\xf9\x02\xdb\xd6\xb8\x4a\x2c\xa5\xc8\x46\x46\x72\xd5\xd9\x19\x9c\x93\x4c\x63\x08\xf5\x5d\x4b\xd0\x5e\x52\x32\x06\x43\x1d\x51\x9c\x09\x0c\x92\x2a\x8f\x5c\x4e\xae\xae\x8b\x0c\xd1\xa4\xc8\x08\xa5\x85\x42\xb3\x72\x16\x2e\x3b\x24\xcd\x1a\xef\x9f\x74\x0b\x9c\xcf\x10\xc9\xa4\x88\x5b\x0b\xb2\xbc\x73\xa0\x76\x80\xcc\x7a\xf8\xb8\xd6\xb4\x75\x31\x28\x2a\x70\x17\xc0\x6e\xe7\x08\x67\x4b\x11\x02\xc7\x85\xd3\xa3\xdc\xa3\xb2\xed\x04\xaf\x29\x22\x69\x8c\x4c\xfd\xa2\x5d\xeb\xba\x6b\x8d\xcc\x7a\x30\x23\xa1\x5d\xe4\x7d\xfe\xea\xc6\xe7\xa1\x38\x68\xc7\xbe\xcf\xc3\x9b\xa1\xd5\xa9\x1a\xbe\x05\xf5\x66\x3a\x4b\xca\x61\x7f\x91\x98\xec\xcb\xe6\x71\x5f\xdf\x17\xd7\x83\xcc\x24\xa5\x60\x54\x28\xac\x6e\x09\xe3\xf4\xe9\x95\x38\x07\x43\xc7\xad\x79\xdb\xdb\x7a\xa8\x86\x5a\xba\x9d\xf7\x4f\x85\x13\x5c\x0e\x03\x54\xd0\x9d\x02\xe9\x48\x49\xae\xe4\xa5\xc4\x28\xf6\x00\x86\x86\x42\x9a\xa7\x21\x27\xda\x94\x22\xcf\xc7\x2e\x49\xd2\x21\xf1\x07\x5f\xa0\xaa\x4c\xd1\x0a\xf3\xa6\xe8\x92\x63\xe0\x0b\xe0\xde\x7e\xa9\x08\x40\x79\x8f\x6a\xc1\xe5\x2a\x04\xe4\x9c\x65\x9a\xe9\x36\x51\x3d\x1f\x3c\x84\x90\x30\x4a\x51\x1c\x8e\xd3\x94\x51\xca\xb1\xc7\x3e\x89\xf5\xaf\x0e\xbe\x63\x89\xa2\x52\xe0\xd5\xab\x5f\xfc\x6c\x0b\xc9\x81\x4d\x21\x0e\xe7\xfe\x0c\xd3\x5d\x5e\x58\xf8\xc0\xfa\x62\xbe\x47\x2d\x8f\xd1\xdb\xc9\x60\xdf\x18\x1d\x0a\xec\x6e\x3f\xd9\xcc\xf0\x93\x59\xef\xe6\x47\xc5\x81\xaa\x86\x5b\x3f\x96\x16\x97\x17\x9d\x4a\x91\x12\xb5\x64\x22\x28\x13\x6c\x08\x93\xeb\x5e\x39\x55\xcb\x71\x48\xd5\xd6\x5b\xc2\xc0\x3e\xc0\xed\xaa\xce\xbd\xdb\x4f\x72\x23\x7d\x85\x38\x84\x67\xd9\x03\x68\xc9\x19\x75\xf9\x35\x3a\xa3\x73\x9f\xce\x21\xcc\x60\x06\xcf\xfa\x8b\xda\x4e\xe3\x4e\x89\xd9\x55\xc5\x83\xe6\x8a\x4c\x71\xe8\xb0\xf1\xd9\xdb\xc8\xec\x50\x40\xdb\x7c\xb3\x63\x60\x7b\x08\x67\xc4\x05\x54\x29\x5b\x72\x75\x0c\xd2\x6d\x79\x7b\x12\x58\x2c\xf9\x4e\xc4\xb8\xfd\xe8\x17\x67\xa3\xea\x2f\xc8\x2b\x0e\x54\x6c\x56\x64\xa9\xd7\x69\xdb\x5d\xa0\xfb\xf6\x3f\xa0\x48\x3a\xaf\xfa\xe7\xfd\x1d\x88\x13\xdf\xd0\x4d\x4c\x2b\x45\xfc\x6d\x44\xa9\x46\x60\x9b\x09\x54\x95\x36\xd5\xd3\xf0\x84\x72\x54\x60\x47\xc5\x76\xba\x68\x27\xa4\x14\xfb\x36\x6e\x40\x62\xea\xb0\x7a\x24\x9f\x13\x10\x97\x19\xcc\x1b\x28\x65\x90\x5e\x1d\x0a\x52\x43\x94\x09\x28\xb1\x9e\x54\xde\x5b\xd4\xc5\x83\xcc\x02\x8f\x6f\xa5\x4c\xd4\xa7\x08\xdd\x74\x38\x6c\x13\xee\x89\x62\x44\x98\x40\xe4\x29\x2a\x16\x87\xf6\x85\x22\xe7\x44\xd9\x01\xed\x85\x39\xbd\x00\x26\x74\xc6\x14\x52\x88\xd6\x90\x18\x93\xe9\x70\x3a\x8d\xb5\x0e\x8c\x62\xf1\x9d\x2e\x3e\xc7\x69\xc1\xb2\x0c\x8d\xb6\xe3\xd3\x4c\xd9\x26\xc8\x04\x5c\x8a\x65\x90\x2b\xae\x83\x85\x92\x69\x10\x29\x24\x77\xb6\x2b\x90\xb9\x09\xe4\x22\x88\xa5\x30\x84\x09\x54\x53\xb8\x98\xee\xcd\x22\xa4\x41\x3d\x86\x09\x45\x1d\x2b\x56\x9c\x9f\x3a\x76\x98\x5e\xc0\xb7\x04\x35\x02\x51\x08\x06\xe3\x44\xd8\x4a\xce\xd7\xb6\x31\x06\x4d\xac\x0d\xa3\xdc\x40\xae\xd1\xb6\xdf\x49\x93\x3b\x34\x5b\x03\x6b\xa3\x10\x0a\x58\xc1\x4a\x2a\xa7\x88\xd9\x11\x0f\x49\x8b\x26\x48\x75\x31\x5c\xea\x56\x13\x12\xee\x74\x02\xd3\x0b\xf8\x24\xb4\xb1\x5d\xbb\x05\x65\x12\xa6\x41\x48\x11\x68\x43\x04\x25\x8a\x82\x14\x18\xba\x30\xbb\x7c\x3d\x00\xa6\x17\xf0\x96\x52\x0d\x04\x92\x75\x96\xa0\x80\x55\x82\xd6\x28\x09\x16\xeb\xcb\x85\x7a\x0c\x6c\x01\x3a\xcf\x32\xa9\x0c\x52\x78\xfa\x4f\x59\x1e\x90\x9e\xbb\x32\xad\x3e\x25\x23\xed\xab\x5c\x41\x2a\x7f\x1c\x9c\x5f\x61\x74\xc7\xcc\x21\x92\x9e\xa9\x66\x5c\xb4\xfe\x7a\xc0\xd9\x7a\x99\x91\x98\x99\xb5\x7d\xab\xbb\x6e\xae\x86\xe2\x38\xba\x3a\x62\x2e\x9f\x8a\x07\x28\x8e\x9b\xde\x8c\x32\xc5\x84\x69\x7c\x1c\xf8\x35\x23\xcb\x4e\x78\x55\x71\x7b\x79\x9d\xa6\x70\x35\x4b\xfd\x15\xae\xe8\xc8\x07\x1f\x5b\x37\xcf\x2a\x2e\x0f\xf4\x37\x2f\xfb\x16\x5d\x8d\x21\x79\x36\x86\xe4\xf9\x81\xc5\xcf\x7b\x16\x1f\x38\x2c\xe8\x76\xd5\xd6\x20\xa5\xbb\x05\x4c\x68\x46\x31\x04\x72\x2f\x99\x3f\xf1\x19\xb7\x42\x1c\x5f\xed\x50\x91\x85\xb1\x3d\x50\xaf\x17\x94\xef\xb8\xbd\x42\x22\x5c\x48\x35\x58\xc8\x41\xa2\x03\x78\x29\xd3\x19\x27\xeb\xb0\xb4\x64\x55\x1b\x03\xdb\x0b\xf6\xbc\x98\x7b\x9c\xe3\x27\x81\x6e\x4a\x59\x74\x0f\x44\x4f\x96\x32\x5c\x6b\xdb\xbf\xf5\xab\x7c\xac\x89\xf7\x01\xeb\x24\x85\x01\xda\x43\x33\xc0\x7d\xdf\x9b\x72\x6d\x64\xda\xf8\xde\x54\xfd\xb1\x4c\xfb\x33\xdc\xbb\x9a\xaa\xf9\x49\xcb\xf9\x30\x55\x2e\x9e\xb4\x3e\x7a\x35\x48\x76\xb2\x8f\x0b\xf9\xc8\x38\x1e\x15\xc4\x04\x67\x02\xdf\xcd\xe7\x70\x54\x64\xf5\xfb\xdf\x00\x00\x00\xff\xff\x2e\x4f\x2f\x3c\x4d\x28\x00\x00")

func reportsHtmlCommonsGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_reportsHtmlCommonsGohtml,
		"reports/html/commons.gohtml",
	)
}

func reportsHtmlCommonsGohtml() (*asset, error) {
	bytes, err := reportsHtmlCommonsGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "reports/html/commons.gohtml", size: 10317, mode: os.FileMode(0644), modTime: time.Unix(1658243185, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x58, 0x8, 0xfe, 0x51, 0x34, 0x84, 0xe2, 0x7b, 0x42, 0x1, 0xe3, 0xda, 0xe8, 0x81, 0x12, 0x0, 0xb6, 0xbe, 0x3e, 0x74, 0x8f, 0x23, 0x49, 0xbb, 0xa4, 0x35, 0x52, 0x52, 0x49, 0x1d, 0xe5, 0x52}}
	return a, nil
}

var _reportsHtmlDefaultGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x5d\x8f\xa3\x36\x17\xbe\xcf\xaf\x38\x2f\x9a\x8b\x99\xd5\x0b\x68\xee\x56\x2b\x26\x52\x77\xa6\xdb\x56\xda\x6d\xa5\x49\xb6\xbd\x76\xc0\x09\xee\x02\x4e\xb1\xd9\xd9\x08\xe5\xbf\x57\xb6\xc1\x60\xb0\x09\xc9\xa4\x5a\xb5\x57\x09\xd8\x3e\x1f\xcf\xf9\x7a\x9c\xd4\xb5\x0f\xe1\x9b\x1d\xe5\x87\x3d\x7e\x07\x3b\xc2\xd3\x6a\x13\xc4\x34\x0f\xff\x44\x05\xa3\xe5\x2e\xe4\x34\x0f\x77\xd4\x17\x1f\x25\xde\xd3\x92\x07\xcf\x98\x55\x19\x7f\x5f\xc5\x5f\x30\x7f\x13\x82\x7f\x3c\x2e\x16\x75\x9d\xe0\x2d\x29\x30\x78\x6b\xb4\xc9\xb0\x5a\xf4\x8e\xc7\x05\x00\xc0\x75\x74\x28\x49\x37\x1b\xf9\x0e\xde\x3d\x40\xd0\xbd\x64\x29\x7d\xf9\xf1\x1b\x8a\xe5\x7b\x25\xe2\xb7\x3d\x27\xb4\x60\xc1\xaa\x5d\x7a\xaa\x4a\x24\x5f\xc1\xe0\x5c\xbe\xe7\x87\xf1\xb9\x67\x65\xc8\xaa\xdd\x21\xbc\x3c\xd7\x99\x94\xe7\x99\x92\x1a\x36\x62\x4d\x5f\xe8\x9e\xb3\x91\x66\x68\x35\x45\x5c\x40\x09\x71\x86\x18\x7b\xf0\xe4\x83\x4f\x93\xc4\x5b\xca\x55\xb5\x23\xc5\x28\xe9\x3f\x97\xdd\x43\xb3\x41\x9f\x4f\xfd\x17\x92\x60\x6f\x19\xb1\x3d\x2a\xf4\x5b\xc2\x33\xec\x2d\xeb\x3a\x58\x8b\x6f\xc7\x63\x14\x8a\xe5\x65\x14\xf2\xd4\x14\x55\xd7\x64\x0b\xd2\x62\x89\xc9\x0a\x65\x98\x35\x9e\x38\x34\xe6\xb4\xc0\x07\x5f\x58\x88\x4b\xa1\x82\xdc\xbf\x2d\xc0\xfb\x21\xa7\x55\x21\x52\x43\xaa\x80\xba\xc6\x45\x32\x90\x33\x50\xf5\xb9\x58\x97\x28\xfe\x82\x87\xdb\x86\x0e\x92\x1c\x8f\xb4\x3d\x21\x92\x1d\xa0\x2a\x7c\xae\x44\xb4\x7a\x07\xfa\x4e\xda\xf0\x5a\x0b\xce\x55\x7f\x52\x6a\x93\xcc\x0e\x81\xc2\x76\x5d\x13\x16\xa3\x67\x06\x73\x56\x40\x55\xdd\x21\x23\xac\x16\x85\x63\x1f\xe7\xf8\xa9\x84\x27\xd3\xde\x9a\xa2\xa3\xb0\x5f\x05\x62\xff\xa0\x46\x36\x34\x39\x74\xcf\x75\x5d\xa2\x62\x87\xa1\x69\x2c\xc1\x63\x4a\xb2\x44\x35\x9e\x21\x24\x12\x35\x5a\xc2\x6d\x41\x39\x04\xb2\x2b\xac\x68\x55\xc6\xf8\x0e\xba\x4e\x62\x75\xb2\x1c\x23\xa2\x16\x12\xa3\xf4\x78\xb2\x5c\x58\x37\x9e\x15\xaf\xc4\x88\x97\xc0\x92\xe3\x7c\x9f\x21\x8e\x41\xbd\xfa\x48\x18\xf7\x20\x90\x52\x82\x67\x5a\x15\x89\xc8\x6c\xa5\xde\xae\xdd\x1e\x3c\x8b\x65\x53\xb5\x3a\xb0\x4e\xc4\xdb\x34\xae\x29\x92\x5f\x8a\x2d\xf5\x20\xf8\x09\x73\x59\x3b\x3d\x91\x57\x31\xf1\xea\x06\x9e\x61\xde\xf9\x2a\x75\xea\x43\xd0\xd6\xfc\x8c\x4c\x99\xaa\x7d\x07\x2c\x53\x39\x05\x17\xe4\x55\xa3\xde\x8d\x09\x9c\x08\x9b\x03\x9a\x9c\x14\x2d\x10\x1d\x24\x22\x16\x27\x15\x3a\x7b\x50\x38\xac\xcf\xe1\x4e\x4b\x8b\x31\x9b\x48\xc4\xb7\x94\x72\x63\x10\xb7\x76\x97\xf4\xc5\x67\xd5\x86\x53\x8e\x32\x6f\x34\x9d\x75\xa3\x5b\xcb\x75\x77\x37\x9f\x8c\xd3\xb0\x47\xc3\xb0\x53\x5b\x03\xd5\x76\xbc\x71\x1f\x10\x66\xcd\x1f\xcb\x30\x7b\x76\x39\x2a\xa9\x35\xc4\x5e\xf1\x17\x0f\xeb\xab\xdb\x75\xa6\x55\x03\x7d\x30\x50\xda\x4f\xe4\x56\x53\x3f\x9f\xff\xd1\xc9\x7e\x8d\x8c\xe9\x0a\xce\x9e\x2f\x57\xc0\xa0\xaf\xe2\xbc\xa1\xdf\xd5\x63\x14\x4a\xea\xbc\x5c\xe8\x26\xdc\x5d\x56\x3e\x21\x5e\x92\x6f\xff\xe1\xdb\x8a\xed\x0e\x91\x20\x8e\x40\x5f\x27\x9a\x6f\xb9\x44\xe2\xc2\xbb\x85\x3a\xec\x37\x97\x89\x8b\x2f\x18\x2f\x84\xa7\x3a\x0d\x3e\x90\x92\xf1\x5f\x69\x21\xdd\x91\xa4\xcc\x9a\xed\xd7\x8a\x95\x29\x55\x51\xc2\x29\x2e\xe8\x48\xf0\x5e\x6e\xf7\x68\xdd\x4c\x42\x7c\xc9\x45\xc0\x3e\x37\xfe\x55\x1c\xd8\x9e\x46\x20\x3f\x1e\xbc\x0e\xc8\x31\xa8\x8e\x31\x3f\x3f\x7a\x60\xe3\x18\xce\x9d\x4a\xfa\x98\x9b\xfd\x41\x78\x2a\x8b\xd6\x20\x69\x6e\x85\x97\xd2\x44\x0d\x54\x4c\x33\xcd\x29\xa0\xeb\xab\x9a\x66\xd8\xb0\x9b\xe0\x60\x4e\x4a\x35\xc9\x1e\x7d\x30\x66\x91\xb5\x92\x0c\xfb\x37\xa5\xd9\x1a\xea\x1a\xac\x97\x3c\x38\xaa\x58\x9f\x66\x7a\xb2\x93\x5c\x44\x2e\xed\x45\xf9\x3d\x99\xa0\xbd\x97\xce\xa1\x87\x4d\xed\x92\xff\xdf\xc4\x22\xe3\xc5\x70\x70\x37\xd1\x53\x55\x51\xd7\x37\x6d\x20\x84\x20\x56\xe5\xf2\xc0\xef\x28\xab\x30\x6b\xe5\xc2\x0d\x99\x3b\xeb\x1d\x0e\xeb\x33\x32\x84\x75\x7d\x6b\x30\x81\xa4\x17\xec\xbb\xe9\x40\x9f\x97\x87\xaf\xca\x41\xc3\xac\x19\x39\x38\x71\xdf\xb8\xf8\x17\x20\x70\x94\xbe\x0b\xe3\x39\x34\xd3\x3a\x55\xe7\x61\xfa\x3a\x3c\xa7\x08\x9f\x1d\x56\x2b\x50\xd3\x93\x6f\x1e\x11\xfc\x2e\x14\xf0\x4c\x2a\x97\x90\xaf\x2d\xcc\x4a\xa6\xd7\x9f\xe0\x64\x0b\xa8\x48\x2c\x74\x52\x71\x5c\xf9\xb3\x3c\x83\x5b\xc2\xd4\xb3\x2e\x65\x39\xc8\x3b\x7b\xee\xee\x46\x03\xbf\x1b\x78\x06\x5d\xd6\x12\xcc\xf6\x98\x31\x2c\x92\x07\xff\xd5\xc5\x17\xef\x79\x0a\xf7\xc3\xeb\x58\x5f\x70\xff\x4f\x83\xf6\xdc\x48\xac\x8d\x89\x04\x2e\xbe\xa1\x01\xb9\x9d\x46\xf7\xae\x61\x32\x4f\x88\xe3\x67\xd1\x48\x95\xc4\x21\x0a\x3a\xa1\x7a\x41\x90\x2d\x1a\x64\xf7\x95\xd4\x44\x8b\x10\xf9\x9b\x90\xaf\xb3\x49\xdf\xd8\x37\x7b\xbc\xd9\x54\x13\x3d\x45\xb8\xaf\xc2\x95\xfa\x31\x6b\xc3\x15\x38\x7f\x76\x73\xb5\xbf\x11\x36\x53\x53\xb6\xd9\xae\x6b\x36\xfa\x5f\x42\x63\x51\x98\x90\xf2\x3c\x5b\x2e\x22\xf1\x01\x19\x2a\x76\xb2\xfb\x88\x2f\xef\x11\xc3\x20\x39\x4f\xd4\xf1\xde\x28\xc7\x1c\x41\x9c\xa2\x92\x61\xfe\xe0\x7d\x5e\x7f\xf0\xdf\x36\x78\x36\x37\x0f\x33\x51\x1e\x2b\xc6\x69\xde\x60\xd8\x1b\xe7\xe2\xc5\xb2\xae\x21\x00\x39\x8d\xe5\xe3\x02\x86\xe4\xad\x0f\x54\x4c\xf3\x9c\x16\x8f\xab\x55\xd7\x5e\x7a\x8b\x52\x4d\xb3\x18\x85\xca\xde\x48\x71\x8a\xc5\x55\xfe\x6b\x9a\xfc\x9f\xa9\xbd\x74\xc9\x1f\x0c\x7a\x2e\xb7\xc5\x1a\xa5\xf7\x22\x95\x84\xab\xe9\xbd\xd1\x39\x47\xe7\x9e\x30\x8b\x4b\x22\x65\xeb\xd3\xfb\x36\x2b\x93\x6e\x51\xe4\x26\x43\x5b\xfc\xf3\xfa\xd3\x47\x90\x92\xf7\x86\x60\xf3\xf7\x8b\x2a\xcf\x51\x79\x00\x0b\x72\xcd\x92\x07\x4d\xef\x95\xae\x2a\x29\xd6\x34\xd5\xbb\xa2\x50\xc1\x1b\x49\xcc\x96\x7f\x07\x00\x00\xff\xff\xb9\x68\xd8\x77\x02\x1d\x00\x00")

func reportsHtmlDefaultGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_reportsHtmlDefaultGohtml,
		"reports/html/default.gohtml",
	)
}

func reportsHtmlDefaultGohtml() (*asset, error) {
	bytes, err := reportsHtmlDefaultGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "reports/html/default.gohtml", size: 7426, mode: os.FileMode(0644), modTime: time.Unix(1629542127, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x94, 0x79, 0x5f, 0xcb, 0xd8, 0xe6, 0x63, 0xf, 0x46, 0xed, 0xe6, 0x4b, 0x1, 0x49, 0xb9, 0xd5, 0x52, 0xa2, 0x4b, 0x10, 0x45, 0x97, 0x3, 0x5f, 0x7f, 0x29, 0xcc, 0x5, 0x25, 0x86, 0x39, 0xb8}}
	return a, nil
}

var _reportsHtmlTimelogGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x57\xdd\xae\xa3\x36\x10\xbe\xcf\x53\x4c\xd1\x5e\xec\x1e\x29\xa0\xd3\xaa\xd2\x6a\xc5\xc9\xc5\x9e\x9f\xb6\x52\xff\xb4\x49\x1f\xc0\xc1\x93\xe0\x2e\xb6\x91\x3d\xec\x69\x84\xf2\xee\x95\x6d\x20\x90\x00\xc9\xd9\x9b\x00\x1e\xcf\x37\x7f\xdf\xd8\x93\xba\x5e\x42\x72\xb7\xd7\x74\x28\xf1\x13\xec\x05\xe5\xd5\x36\xce\xb4\x4c\xfe\x65\xca\x6a\xb3\x4f\xf6\x9a\x84\xc4\xf6\x61\xb0\xd4\x86\xe2\xcf\x55\xf6\x15\xe9\x8b\xff\xb8\x4b\x60\x79\x3c\x2e\x16\x75\xcd\x71\x27\x14\x42\x14\xa4\xd1\xf1\xb8\x00\x00\xb8\x6a\x81\xb4\x4c\xf6\x7a\xe9\x1e\x0d\xfc\x17\xb4\x55\x41\x01\xa6\x81\x0f\x48\xef\xb6\x7e\x0d\x3e\x3d\x40\x7c\x5a\xb4\xb9\x7e\x7d\xfe\x8f\x65\x7e\x3d\x40\xfc\x55\x92\xd0\xca\xc6\xeb\x56\xf4\x54\x19\xe6\x97\xe0\x4c\x4f\x96\x74\xb8\xd4\x0b\xa1\x05\x75\xb7\x63\xa8\xb4\x26\x5d\x6e\x84\xc4\x59\xbd\x6e\x93\x4b\x8e\x53\x4e\xb9\xf8\x06\x59\xc1\xac\x7d\x88\x42\x1c\xd1\xca\x0b\x02\xb2\xd8\x41\x13\x5e\xdc\x37\x39\xd8\xa0\x0d\xbc\x57\x9a\x86\x1b\xd7\xba\x32\x19\x7e\x80\x53\x3c\x67\xaa\xde\x38\xb1\x6d\x81\xad\x79\xff\xb1\xe4\x8c\x18\x84\x57\xcd\x79\xcf\x99\xa1\x62\x8e\x8c\x4f\xc9\xcc\xb8\x20\x38\x9c\xdc\xa1\xdc\x22\xe7\xc8\x81\x04\x15\x08\xa4\xe1\x2b\x62\xd9\x7c\x31\xc5\x83\x75\x0b\xa4\xf7\x48\x39\x1a\x10\x0a\x4a\x23\x14\x21\x87\xbf\x9f\x5e\xec\x5d\x32\x12\x4a\xcf\x33\xc8\x74\x61\x4b\xa6\x1e\xa2\x9f\xa3\x2e\x36\x07\x1e\xad\x3a\xb2\xc4\x1b\xb7\x70\x3c\xa6\x09\xe5\x13\x61\x24\x53\x71\xcc\x06\xe8\xed\x07\x9b\x9c\x11\x2e\x5d\x9e\xd0\x38\xcb\xe2\xfe\xa3\x82\xe8\x89\x11\x46\x73\x76\x6f\x01\x59\x13\x33\x74\x15\x25\xb0\xa7\x4f\xcd\xe3\xf1\x1a\xf2\xb3\xe2\x2d\x6e\x5d\xa3\xe2\xd7\x32\xdd\x66\x57\x8e\x44\xda\x34\xd7\x5b\xa2\xa5\x7c\xf9\x2a\x38\x9e\x40\xfe\xd4\x84\x76\x16\x61\xa6\x4e\xc9\x2c\x4b\xb7\x9a\x1f\xc6\x65\x75\x6d\x98\xda\x63\xd7\x50\x2f\x86\x49\xb4\xcd\x63\x36\x23\x33\xc4\x08\x1b\x78\x1b\xa9\x75\x25\x5c\x72\x76\x70\xb1\xee\xb4\x91\x8c\x1c\x35\x20\xf6\xb5\xf5\x01\x4f\x78\x3e\x09\xe6\xaa\x70\x42\xf3\xa7\xcc\xed\x68\x63\x64\x99\x55\xb8\x70\x41\x97\x8d\x07\x57\xd5\xbc\xad\xf8\x37\xeb\x2c\x95\x38\xc7\xb1\x51\x2d\xa1\xf6\x05\x3e\xb1\xb1\x03\x6d\x5a\xb7\x9f\x94\xe7\x59\x5e\x0f\xf5\xb0\xb0\xb7\x64\xe2\xdc\x90\xab\xe5\x77\x18\xbb\x69\xef\xad\xfb\x6e\x29\xfa\x75\xa4\x5e\x8d\x5b\x82\x49\xa1\xda\xe6\x86\xf7\x46\x57\x8a\x23\xef\x16\xe2\xee\xad\x69\x9f\x0f\x6f\x24\xb3\xf2\x2d\xbf\xaa\xeb\xd8\x37\xff\x35\xed\xe9\xfe\x9f\x8b\x2e\x4d\x66\xfa\x3f\xa5\x9d\xd6\xd4\x31\xbb\xda\x92\x26\x56\x4c\x5e\x85\xa6\xdd\x69\xf4\xeb\xf2\xca\x6e\x38\xbf\xa2\xc6\xfa\xee\xa7\x96\x76\x3f\x36\x21\x9c\xce\xc3\x8d\xc7\x7e\xc3\x89\x9a\xe9\xa2\xf3\x09\x5c\x01\xfd\x4f\xcf\xcd\x61\x39\xbb\xea\xc5\xbf\x20\xdd\x60\x66\xf5\x9d\x07\xb3\x4b\xf0\xa5\x30\x4d\xfc\xd5\xbf\x3a\x9b\x71\x86\x65\x1c\xed\xc9\xfe\x18\x35\x7d\xd7\x73\xf1\xed\x1c\x7b\x78\xd2\x3f\xe6\xa2\xe0\x61\xc4\x1c\x3b\xe8\xeb\x9a\x50\x96\x85\x3b\xa7\xdb\x79\xb6\x1b\x39\x67\xdc\xed\xbe\x1b\x0f\xda\xa5\xc5\x5b\xa6\xe0\x9c\x64\x11\xc6\xca\xa4\x99\x2b\x9b\x21\xb8\xae\xdf\xe9\x92\xec\xc5\xd8\xe9\x47\xcc\xf4\x07\xae\x33\x07\x0f\x4e\x7f\xb5\x48\xdd\x03\x0a\xa6\xf6\x8e\x7a\xfe\xe5\x33\xb3\x6e\x1c\x8d\x9c\xb0\xbb\x2e\x53\x89\xc4\x20\xcb\x99\xb1\x48\x0f\xd1\x3f\x9b\x97\xe5\xc7\x86\xd2\x75\xfd\x2a\x28\x07\x6f\x34\x7e\xac\x2c\x69\xd9\x24\x78\x71\x22\x86\x5b\x70\x2d\xec\x29\xe4\x3f\x16\xfd\x64\x2c\xce\xb3\x99\x69\x29\xb5\x7a\x5c\xaf\x4f\x7f\x10\x7a\x42\x6f\xa4\x11\xa6\x49\xf0\x32\x0d\xfd\xbb\x98\x72\xa7\x1d\xe9\xd3\xfc\xbe\x75\x24\xbf\x1f\xe4\xfe\x42\xef\x09\x6d\x66\x84\xcf\x5e\xa7\x5d\x76\xe3\xd2\x49\xe8\xb8\x65\xd9\x0e\x7f\xdd\xfc\xf1\x3b\x78\xe4\x72\x00\xec\x3a\xda\xc3\xfa\x89\xbf\x92\x92\x99\x03\x8c\xc4\xd5\x88\x22\x68\xfe\xdb\xf8\x62\x76\x28\x23\x54\xeb\xb6\xa5\x49\x88\x3e\xf5\xb4\x58\xfd\x1f\x00\x00\xff\xff\x3a\xcd\xb5\xcf\xb0\x0d\x00\x00")

func reportsHtmlTimelogGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_reportsHtmlTimelogGohtml,
		"reports/html/timelog.gohtml",
	)
}

func reportsHtmlTimelogGohtml() (*asset, error) {
	bytes, err := reportsHtmlTimelogGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "reports/html/timelog.gohtml", size: 3504, mode: os.FileMode(0644), modTime: time.Unix(1658243232, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfb, 0x32, 0xa2, 0xf5, 0x26, 0xe8, 0x5e, 0x69, 0x3, 0xb3, 0xaf, 0x65, 0x40, 0x9c, 0x62, 0xcf, 0x4b, 0xd, 0x97, 0x9a, 0x4e, 0xa8, 0xf4, 0x52, 0x0, 0x24, 0xfa, 0x3f, 0x4, 0x88, 0xd0, 0xd0}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"reports/html/commons.gohtml": reportsHtmlCommonsGohtml,
	"reports/html/default.gohtml": reportsHtmlDefaultGohtml,
	"reports/html/timelog.gohtml": reportsHtmlTimelogGohtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"reports": {nil, map[string]*bintree{
		"html": {nil, map[string]*bintree{
			"commons.gohtml": {reportsHtmlCommonsGohtml, map[string]*bintree{}},
			"default.gohtml": {reportsHtmlDefaultGohtml, map[string]*bintree{}},
			"timelog.gohtml": {reportsHtmlTimelogGohtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
