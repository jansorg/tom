// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/reports/html/commons.gohtml
// templates/reports/html/default.gohtml
// templates/reports/html/timelog.gohtml

package tom


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataReportsHtmlCommonsGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\xdd\x6f\xdb\x38\x12\x7f\xef\x5f\x31\x70\x6e\x81\xa6\xb0\x64\x3b\x69\x7a\xad\x9a\x06\xdb\x4d\xdb\xdb\x02\x0d\xf6\x10\x77\x71\xc0\xbd\x51\xd6\xd8\x62\xc3\x0f\x81\xa4\x93\xb8\x86\xff\xf7\x03\xf5\x61\x4b\x14\x65\xcb\xd9\x60\x1f\xae\x02\x6a\x49\x1c\xce\xfc\x66\x38\x5f\xa4\xb2\x5e\x27\x38\xa7\x02\x61\xc0\xa5\xc0\xd5\x37\xaa\xcd\x60\xb3\x79\x01\x00\xb0\x5e\x2b\x22\x16\x08\x61\xf9\x5c\xbc\x9b\x4b\xc5\x89\xb9\xb1\xc4\x76\xe4\x32\x56\x57\x25\x35\x8a\x64\xb3\x79\x51\xfd\xbe\xd8\x71\x4e\x96\x8a\x18\x2a\xc5\x8e\xf1\x03\x35\xa9\xc3\x37\x80\xd1\xab\x85\x34\xab\x0c\x23\x58\x50\x93\x2e\xe3\x70\x26\xf9\xe8\x07\x11\x5a\xaa\xc5\xc8\x48\x3e\x5a\xc8\xc0\xfe\x24\xc4\xe0\x77\xca\x31\xfc\x54\xf2\x9d\x2e\xf9\xab\x11\x04\x0d\x76\x74\x0e\xe1\x57\x7d\x2b\x97\x22\xc1\xe4\xbf\xa8\x64\x6d\xd4\xfe\xbb\xd4\x19\x11\x30\x63\x44\xeb\x0f\x5b\x80\xc1\x4f\x54\x72\x70\xb5\x5e\x73\x2a\x2a\xe6\x10\xfe\x0b\xcd\x66\x73\x39\xb2\x13\xae\x6a\x12\x90\x69\xf4\x31\xed\x3b\x3d\xb7\x52\x4f\xcb\xfd\x87\x9a\xf4\xf3\x23\x99\xd5\xd6\xe6\x1f\x3a\x95\x0f\xf9\x3b\x88\x3e\x80\xc2\x4c\x2a\xf3\x47\x66\x89\x75\x38\xad\x86\x2a\x14\x1a\x2c\xdf\xff\x17\xdb\x57\xa0\xe9\x1c\x6a\x56\x08\x1c\x29\xb9\xa4\x58\x5d\x3d\x8f\xb4\xdd\x72\x3d\xc3\xea\xff\x05\x05\xd6\x6b\xa0\x93\xb7\x02\x06\xa5\x79\x61\x1b\x5c\xb0\xd9\xf8\x14\xca\x79\xf7\xd6\xaa\x8f\x53\x1a\x45\x66\x77\x98\x7c\x15\x73\xf9\xdc\x11\x6d\xff\xfb\x2c\x8c\x5a\x4d\x51\x51\xd4\x2d\xcf\x1a\xbd\x72\x14\xbc\xa1\x62\xb3\x79\x35\x3a\x40\x44\x1e\x5b\x44\x0d\x82\x8f\xf7\x8b\xc3\x6a\x4f\x97\x9c\x13\xb5\xda\xa9\x7c\x40\xbf\x85\x34\x94\x63\xf5\x53\x04\x68\x78\x8b\x7a\xc9\xcc\x6f\xcb\xd9\x1d\x9a\x52\xbb\x9c\xdb\xa5\x21\x31\xc3\x6a\x91\x75\x29\x6a\xb7\x5c\x97\x26\x96\xc9\xea\xaa\x11\x64\xe1\x57\xfd\x6f\x25\x7f\xe0\xac\xe4\xe7\xba\xa3\x51\x57\x6d\x7f\x32\xc9\xd5\x7a\x5d\x78\x50\x39\x79\x60\x9d\xc3\x24\x5e\xda\x0a\x90\xa1\x86\xa1\xf5\xae\xf0\xbb\xbd\xf3\xcd\xb8\x1c\xd5\xe5\xb5\x5d\x8b\xce\x41\x48\xe3\x24\xaa\xdb\xc2\x2a\x9f\x88\xc1\x2f\x94\x19\x54\xb7\xb6\xe2\x84\x9f\x79\x66\x56\x70\xac\x3e\xd6\x79\x20\x2f\x59\x51\x3f\x9d\x38\x06\x39\xb9\x55\xac\x17\xae\x1b\x2a\x28\x27\x6c\x6a\x14\x15\x8b\x5e\x46\x60\x1a\xa1\xd4\x3c\xe7\x56\xd3\xef\x6f\x55\xaf\x26\xfc\x78\x25\x1a\x2b\xd9\xc2\xd9\xc0\x58\xa4\x06\xb0\xc2\xfd\x28\x1d\x84\xad\x8c\x35\x5d\xf2\x3f\xe6\xd3\x65\xbc\xad\x5c\x2e\x13\x17\x1d\x9d\xf7\x2a\x7e\x47\x99\xba\xc8\xc7\xe6\xa0\x32\x7d\x14\xaa\xee\x1a\xb9\xf8\x09\xc1\x43\x44\xe2\x51\xb4\x32\x78\xf8\x3b\xd1\x9f\x08\x65\xab\xf2\xc5\xb1\x1a\xe7\x73\x9f\xaa\x71\x8b\xa2\x00\x6d\x90\x67\x8c\x18\xa7\x62\xe4\x45\x69\x0f\xd4\xd2\x1c\xcf\x65\xa0\x3f\x45\xcb\x44\xdb\x57\x4f\x33\xd2\x52\xfc\xbd\x66\xea\x82\xfb\x64\x43\xb5\x8d\x34\x25\x0c\x8f\x8f\x92\xef\xd2\x10\x06\x84\xcb\xa5\x30\x47\xc5\xc7\x4e\xe3\xdd\x9e\x03\xc2\x1c\x44\x58\xb6\x35\x4f\xc8\x4b\xa3\x5a\x89\xbc\x1c\xe5\xf5\xf4\xca\x57\xc7\x67\x92\x73\x29\xae\xa7\xd3\xaa\x92\x5f\x6a\xb3\xb2\xb4\x15\xa7\x48\x49\x69\x60\xdd\x90\x1d\x04\x73\x29\x4c\xa0\xe9\x4f\x8c\x60\x72\x96\x99\xf7\xbe\xe1\x39\xe1\x94\xad\x22\x18\xe8\x95\x36\xc8\x83\x25\x1d\x0c\x21\x20\x59\xc6\x30\x28\x5e\x0d\xe1\x37\x46\xc5\xdd\x0d\x99\x4d\xf3\xe7\x2f\x52\x98\x21\x0c\xa6\xb8\x90\x08\x7f\x7e\x1d\x0c\xe1\x56\xc6\xd2\xc8\x21\xfc\x8e\xec\x1e\x0d\x9d\x91\x21\x7c\x54\x94\xb0\x21\x68\x22\x74\xa0\x51\xd1\xf9\x10\x06\x1f\x2d\x53\xb8\x96\x4c\x2a\xf8\xcc\xe5\x0f\x2b\x69\xcb\xc6\xf3\x66\xba\xe2\xb1\x64\x03\x17\x76\x5e\x25\x9a\xd8\xbf\x2d\x67\x34\x21\x70\x2d\x85\x96\x0c\x07\x43\xb8\x91\x82\xcc\xe4\x10\xb8\x14\x52\x67\x64\x86\xdd\x4c\x1e\x90\x2e\x52\x13\x81\xb0\x9b\x44\xf6\xfe\x85\x43\x38\xb3\x70\x23\x88\x19\x99\xdd\xb9\x4c\xe2\x45\x35\xfc\x90\x52\xe3\x91\x61\x18\x56\x14\x27\xe7\x93\x37\x17\xf1\x6b\x97\x46\xc9\x87\x00\xef\x51\x54\x64\xf7\x44\xbd\xdc\x31\x3e\xf5\x91\xcb\x24\xd9\x32\x45\x6c\x49\xcd\x87\x82\xa5\x58\x6a\x4c\x22\x38\x21\x68\xaf\x16\x72\xa9\x12\x54\x25\x2d\x2b\x0c\x50\x88\xae\x4f\x3f\x6d\x59\xa3\xec\xf2\x9a\x68\xfd\x50\x2b\xd2\x9d\x91\x5a\xba\xb9\xf6\xb2\xfe\x1f\x3c\xd0\xc4\xa4\x11\x4c\xc6\xe3\x5f\x5a\x06\xcd\x09\x12\x62\xc8\x61\x2a\x93\xf6\x01\xb9\xa5\x8d\x17\xfd\x16\x60\x3b\xa1\x72\x9b\x58\xb2\xa4\x93\xc8\x3a\x58\x11\x7f\xe3\xf0\xad\x42\xde\x69\xcf\xfa\x7a\x54\x18\x1a\x6b\x5d\x03\xb2\xd9\x31\xf9\x95\x63\x42\x09\xbc\xcc\x14\xce\x51\xe9\x72\xf1\xf4\x2c\x45\x8e\x11\x24\x44\xdd\x9d\x3a\x49\xc1\x97\x28\xa0\xee\xe8\x27\x73\x62\xaf\xf7\x1e\x8a\xdd\x4a\x9e\x4c\x88\xbd\x7c\x44\x87\x9d\x1e\xbc\x9e\x7c\xf6\xc6\x5e\x5d\x94\xf5\x10\x39\xb9\x78\x67\x2f\x1f\xa9\xe3\xfb\x6f\xc7\xf6\xf2\xaa\xf2\x24\xff\x87\x0e\xc7\x3e\x79\x3d\xb6\x97\x97\xba\xbf\x37\x42\x87\x47\x9e\xfc\xf3\xdc\x5e\xfb\xb1\x1c\xe1\x3f\x90\xfb\xd0\xee\x6e\x7b\x9b\x1a\xce\x1c\xd7\xa8\x55\x90\x82\xe9\xf6\x85\xc3\xf0\xa0\x76\x31\x99\xdd\x2d\x94\xad\x94\xbd\x52\x5d\x23\xbf\xd7\x44\x17\xaf\xdc\x85\x31\xf8\x68\x02\x85\x22\x41\xbb\x41\x88\x40\x66\x86\x72\xfa\x13\xbf\xe1\x82\xc6\x94\x51\xb3\xf2\x86\x4f\xb1\x81\x6d\x6a\x5c\x26\x96\x42\x64\x2d\x23\xb9\xea\x6c\x0d\xce\x48\xa6\x31\x82\xea\xae\x21\x68\x27\x29\x1d\x82\x49\x1c\x51\x8c\x0a\x0c\xd2\x32\x8f\x4c\xc2\xb3\x8b\x3c\x43\xd4\x29\x32\x92\x24\xb9\x42\xe3\x62\x14\x26\x2d\x92\x7a\x8d\xf7\x0f\xba\x05\xce\x67\x88\x34\xcc\xe3\xd6\x82\x2c\xee\x1c\xa8\x2d\x20\xe3\x0e\x3e\xae\x35\x6d\x5d\x0c\xf2\x0a\x6c\x01\x3c\x28\x92\xbd\x6f\xaf\x1c\x61\x74\x21\x22\x60\x38\x77\x7a\x94\x7b\x54\xb6\x9d\x60\x15\x45\x2c\x8d\x91\xdc\x2f\xda\xb5\xae\x3b\xd7\xc8\xac\x03\x33\x92\xa4\x8d\xbc\xcb\x5f\xdd\xf8\xdc\x17\x07\xcd\xd8\xf7\x79\x78\x3d\xb4\x5a\x55\xc3\x37\xa1\x5a\x4c\x67\x4a\xf1\xda\x5f\x24\xc2\x5d\xd9\x3c\xec\xeb\xbb\xe2\xba\x97\x99\x4c\x12\x30\x2a\x12\x56\xb7\x94\xb2\xe4\xe5\x99\x38\x05\x93\x0c\x1b\xe3\xb6\xb7\xf5\x50\xf5\xb5\x74\x33\xef\x1f\x0b\x27\x98\xf4\x03\x94\xd3\x1d\x03\xe9\x40\x49\x2e\xe5\x71\x62\x14\x7d\x04\x93\x44\x42\x9a\x97\x11\x23\xda\x14\x22\x4f\x87\x2e\x49\xda\x22\xf1\x07\x5f\xa0\xca\x4c\xd1\x08\xf3\xba\xe8\x82\x63\xe0\x0b\xe0\xce\x7e\x29\x0f\x40\x79\x8f\x6a\xce\xe4\x43\x04\xc8\x18\xcd\x34\xd5\x4d\xa2\x6a\x3c\x78\x8c\x20\xa5\x49\x82\x62\x7f\x9c\x72\x9a\x24\x0c\x3b\xec\x93\x5a\xff\x6a\xe1\x6b\x26\x8a\x66\xa6\xaa\x29\xf0\xee\xdd\x2f\x7e\xb6\xb9\xe4\xc0\xa6\x10\x87\x73\x77\x86\x69\x4f\xcf\x2d\xbc\x67\x7e\x3e\xde\xa1\x96\xc7\xe8\xcd\x64\xb0\x6b\x8c\xf6\x05\x76\xbb\x9f\xac\x67\xf8\x70\xdc\xb9\xf8\x71\x7e\xa0\xaa\xe1\xca\x8f\xa5\xc1\xe5\x4d\xab\x52\x70\xa2\x16\x54\x04\x45\x82\x8d\x20\xbc\xe8\x94\x53\xb6\x1c\xfb\x54\x6d\xec\x12\x7a\xf6\x01\x6e\x57\x75\xea\x5d\x7e\xb2\x34\xd2\x57\x88\x23\x38\xcf\x1e\x41\x4b\x46\x13\x97\x5f\xad\x33\x3a\xf5\xe9\x1c\xc1\x18\xc6\x70\xde\x5d\xd4\xb6\x1a\xb7\x4a\xcc\xb6\x2a\xee\x35\x57\x6c\xf2\x43\x87\xb5\xcf\xde\x46\x66\xfb\x02\xda\xe6\x9b\x2d\x03\xdb\x43\x38\x6f\x5c\x40\xa5\xb2\x05\x57\xc7\x20\xed\x96\xb7\x23\x81\xcd\x24\xdb\x8a\x18\x36\x1f\xfd\xe2\x6c\x54\xfd\x05\x79\xf9\x81\x8a\xcd\x8a\x94\x7b\x9d\xb6\xd9\x05\xba\xbb\xff\x1e\x45\xd2\xd9\xea\x9f\x76\x77\x20\x4e\x7c\xc3\xa1\x0e\xa6\xa5\x46\x60\x9b\x09\x54\xa5\x36\xe5\x53\xff\x84\x72\x50\x60\x4b\xc5\x66\xba\x68\x26\x24\x8e\x5d\x0b\xd7\x23\x31\xb5\x58\x3d\x91\xcf\x11\x88\x8b\x0c\xe6\x0d\x94\x22\x48\xcf\xf6\x05\xa9\x21\xca\x04\x09\xb1\x9e\x54\xdc\x5b\xd4\xf9\x83\xcc\x02\x8f\x6f\x71\x2a\xaa\x53\x84\x76\x3a\xec\xbd\xea\x42\x1a\xd4\x43\x08\x13\xd4\x33\x45\xf3\xf3\x49\xf7\x18\x8e\xeb\x20\x5d\x65\x29\x0a\xed\xcb\x5f\xc1\x03\xc6\x77\xd4\xec\x23\xe9\x18\xaa\xc3\x68\x7c\x23\x76\x00\xc8\x8c\xcc\xa8\x59\xd9\xde\xfd\xa2\x3e\x1b\xf2\x43\xc7\xf2\x20\xb1\x78\xca\x1f\x20\x3f\x54\xf8\x30\xc8\x14\x15\xa6\x76\x04\xfc\x6b\x46\x16\x2d\x23\x96\xab\x33\xb9\xe0\x1c\xce\xc6\xdc\x9f\xc7\xf2\xbe\xab\xf7\xe1\x64\x7d\x47\x3a\xd9\x53\xc5\xde\x76\x4d\x3a\x1b\x42\x7a\x3e\x84\xf4\xf5\x9e\xc9\xaf\x3b\x26\xef\xd9\x12\xb6\x7b\x27\x6b\x90\x20\x56\x48\xee\x02\x2a\x34\x4d\x30\x02\x72\x2f\xa9\xdf\xbd\x8d\x9b\x07\x0e\xcf\x76\xa8\xc8\xdc\xd8\x4a\xd7\xe9\x05\xc5\x4e\xa6\x53\x48\x8c\x73\xa9\x7a\x0b\xd9\x4b\xb4\x07\x6f\x42\x75\xc6\xc8\x2a\x2a\x2c\x59\x66\xc0\xc0\x56\xfc\x8e\xed\x97\xc7\x39\x9e\x09\x74\x5d\xca\xbc\x7d\xec\x75\xb4\x94\xfe\x5a\xdb\x2a\xdd\xad\xf2\xa1\x56\xcd\x07\xac\x95\x14\x7a\x68\x0f\xf5\x00\xf7\x7d\x55\x58\x6a\x23\x79\xed\xab\x42\xf9\x27\x11\xcd\x8f\x2d\xd7\x15\x55\xfd\xc3\x85\xf3\xf9\xa1\x98\x1c\x36\x3e\x6d\xd4\x48\xb6\xb2\x0f\x0b\xf9\x42\x19\x1e\x14\x44\x05\xa3\x02\xaf\xa7\x53\x38\x28\xb2\xfc\xfd\x5f\x00\x00\x00\xff\xff\xcd\x94\xa7\x5c\x33\x26\x00\x00")

func bindataReportsHtmlCommonsGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlCommonsGohtml,
		"reports/html/commons.gohtml",
	)
}



func bindataReportsHtmlCommonsGohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlCommonsGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/commons.gohtml",
		size: 9779,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1658145145, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlDefaultGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x5d\x8f\xa3\x36\x17\xbe\xcf\xaf\x38\x2f\x9a\x8b\x99\xd5\x0b\x68\xee\x56\x2b\x26\x52\x77\xa6\xdb\x56\xda\x6d\xa5\x49\xb6\xbd\x76\xc0\x09\xee\x02\x4e\xb1\xd9\xd9\x08\xe5\xbf\x57\xb6\xc1\x60\xb0\x09\xc9\xa4\x5a\xb5\x57\x09\xd8\x3e\x1f\xcf\xf9\x7a\x9c\xd4\xb5\x0f\xe1\x9b\x1d\xe5\x87\x3d\x7e\x07\x3b\xc2\xd3\x6a\x13\xc4\x34\x0f\xff\x44\x05\xa3\xe5\x2e\xe4\x34\x0f\x77\xd4\x17\x1f\x25\xde\xd3\x92\x07\xcf\x98\x55\x19\x7f\x5f\xc5\x5f\x30\x7f\x13\x82\x7f\x3c\x2e\x16\x75\x9d\xe0\x2d\x29\x30\x78\x6b\xb4\xc9\xb0\x5a\xf4\x8e\xc7\x05\x00\xc0\x75\x74\x28\x49\x37\x1b\xf9\x0e\xde\x3d\x40\xd0\xbd\x64\x29\x7d\xf9\xf1\x1b\x8a\xe5\x7b\x25\xe2\xb7\x3d\x27\xb4\x60\xc1\xaa\x5d\x7a\xaa\x4a\x24\x5f\xc1\xe0\x5c\xbe\xe7\x87\xf1\xb9\x67\x65\xc8\xaa\xdd\x21\xbc\x3c\xd7\x99\x94\xe7\x99\x92\x1a\x36\x62\x4d\x5f\xe8\x9e\xb3\x91\x66\x68\x35\x45\x5c\x40\x09\x71\x86\x18\x7b\xf0\xe4\x83\x4f\x93\xc4\x5b\xca\x55\xb5\x23\xc5\x28\xe9\x3f\x97\xdd\x43\xb3\x41\x9f\x4f\xfd\x17\x92\x60\x6f\x19\xb1\x3d\x2a\xf4\x5b\xc2\x33\xec\x2d\xeb\x3a\x58\x8b\x6f\xc7\x63\x14\x8a\xe5\x65\x14\xf2\xd4\x14\x55\xd7\x64\x0b\xd2\x62\x89\xc9\x0a\x65\x98\x35\x9e\x38\x34\xe6\xb4\xc0\x07\x5f\x58\x88\x4b\xa1\x82\xdc\xbf\x2d\xc0\xfb\x21\xa7\x55\x21\x52\x43\xaa\x80\xba\xc6\x45\x32\x90\x33\x50\xf5\xb9\x58\x97\x28\xfe\x82\x87\xdb\x86\x0e\x92\x1c\x8f\xb4\x3d\x21\x92\x1d\xa0\x2a\x7c\xae\x44\xb4\x7a\x07\xfa\x4e\xda\xf0\x5a\x0b\xce\x55\x7f\x52\x6a\x93\xcc\x0e\x81\xc2\x76\x5d\x13\x16\xa3\x67\x06\x73\x56\x40\x55\xdd\x21\x23\xac\x16\x85\x63\x1f\xe7\xf8\xa9\x84\x27\xd3\xde\x9a\xa2\xa3\xb0\x5f\x05\x62\xff\xa0\x46\x36\x34\x39\x74\xcf\x75\x5d\xa2\x62\x87\xa1\x69\x2c\xc1\x63\x4a\xb2\x44\x35\x9e\x21\x24\x12\x35\x5a\xc2\x6d\x41\x39\x04\xb2\x2b\xac\x68\x55\xc6\xf8\x0e\xba\x4e\x62\x75\xb2\x1c\x23\xa2\x16\x12\xa3\xf4\x78\xb2\x5c\x58\x37\x9e\x15\xaf\xc4\x88\x97\xc0\x92\xe3\x7c\x9f\x21\x8e\x41\xbd\xfa\x48\x18\xf7\x20\x90\x52\x82\x67\x5a\x15\x89\xc8\x6c\xa5\xde\xae\xdd\x1e\x3c\x8b\x65\x53\xb5\x3a\xb0\x4e\xc4\xdb\x34\xae\x29\x92\x5f\x8a\x2d\xf5\x20\xf8\x09\x73\x59\x3b\x3d\x91\x57\x31\xf1\xea\x06\x9e\x61\xde\xf9\x2a\x75\xea\x43\xd0\xd6\xfc\x8c\x4c\x99\xaa\x7d\x07\x2c\x53\x39\x05\x17\xe4\x55\xa3\xde\x8d\x09\x9c\x08\x9b\x03\x9a\x9c\x14\x2d\x10\x1d\x24\x22\x16\x27\x15\x3a\x7b\x50\x38\xac\xcf\xe1\x4e\x4b\x8b\x31\x9b\x48\xc4\xb7\x94\x72\x63\x10\xb7\x76\x97\xf4\xc5\x67\xd5\x86\x53\x8e\x32\x6f\x34\x9d\x75\xa3\x5b\xcb\x75\x77\x37\x9f\x8c\xd3\xb0\x47\xc3\xb0\x53\x5b\x03\xd5\x76\xbc\x71\x1f\x10\x66\xcd\x1f\xcb\x30\x7b\x76\x39\x2a\xa9\x35\xc4\x5e\xf1\x17\x0f\xeb\xab\xdb\x75\xa6\x55\x03\x7d\x30\x50\xda\x4f\xe4\x56\x53\x3f\x9f\xff\xd1\xc9\x7e\x8d\x8c\xe9\x0a\xce\x9e\x2f\x57\xc0\xa0\xaf\xe2\xbc\xa1\xdf\xd5\x63\x14\x4a\xea\xbc\x5c\xe8\x26\xdc\x5d\x56\x3e\x21\x5e\x92\x6f\xff\xe1\xdb\x8a\xed\x0e\x91\x20\x8e\x40\x5f\x27\x9a\x6f\xb9\x44\xe2\xc2\xbb\x85\x3a\xec\x37\x97\x89\x8b\x2f\x18\x2f\x84\xa7\x3a\x0d\x3e\x90\x92\xf1\x5f\x69\x21\xdd\x91\xa4\xcc\x9a\xed\xd7\x8a\x95\x29\x55\x51\xc2\x29\x2e\xe8\x48\xf0\x5e\x6e\xf7\x68\xdd\x4c\x42\x7c\xc9\x45\xc0\x3e\x37\xfe\x55\x1c\xd8\x9e\x46\x20\x3f\x1e\xbc\x0e\xc8\x31\xa8\x8e\x31\x3f\x3f\x7a\x60\xe3\x18\xce\x9d\x4a\xfa\x98\x9b\xfd\x41\x78\x2a\x8b\xd6\x20\x69\x6e\x85\x97\xd2\x44\x0d\x54\x4c\x33\xcd\x29\xa0\xeb\xab\x9a\x66\xd8\xb0\x9b\xe0\x60\x4e\x4a\x35\xc9\x1e\x7d\x30\x66\x91\xb5\x92\x0c\xfb\x37\xa5\xd9\x1a\xea\x1a\xac\x97\x3c\x38\xaa\x58\x9f\x66\x7a\xb2\x93\x5c\x44\x2e\xed\x45\xf9\x3d\x99\xa0\xbd\x97\xce\xa1\x87\x4d\xed\x92\xff\xdf\xc4\x22\xe3\xc5\x70\x70\x37\xd1\x53\x55\x51\xd7\x37\x6d\x20\x84\x20\x56\xe5\xf2\xc0\xef\x28\xab\x30\x6b\xe5\xc2\x0d\x99\x3b\xeb\x1d\x0e\xeb\x33\x32\x84\x75\x7d\x6b\x30\x81\xa4\x17\xec\xbb\xe9\x40\x9f\x97\x87\xaf\xca\x41\xc3\xac\x19\x39\x38\x71\xdf\xb8\xf8\x17\x20\x70\x94\xbe\x0b\xe3\x39\x34\xd3\x3a\x55\xe7\x61\xfa\x3a\x3c\xa7\x08\x9f\x1d\x56\x2b\x50\xd3\x93\x6f\x1e\x11\xfc\x2e\x14\xf0\x4c\x2a\x97\x90\xaf\x2d\xcc\x4a\xa6\xd7\x9f\xe0\x64\x0b\xa8\x48\x2c\x74\x52\x71\x5c\xf9\xb3\x3c\x83\x5b\xc2\xd4\xb3\x2e\x65\x39\xc8\x3b\x7b\xee\xee\x46\x03\xbf\x1b\x78\x06\x5d\xd6\x12\xcc\xf6\x98\x31\x2c\x92\x07\xff\xd5\xc5\x17\xef\x79\x0a\xf7\xc3\xeb\x58\x5f\x70\xff\x4f\x83\xf6\xdc\x48\xac\x8d\x89\x04\x2e\xbe\xa1\x01\xb9\x9d\x46\xf7\xae\x61\x32\x4f\x88\xe3\x67\xd1\x48\x95\xc4\x21\x0a\x3a\xa1\x7a\x41\x90\x2d\x1a\x64\xf7\x95\xd4\x44\x8b\x10\xf9\x9b\x90\xaf\xb3\x49\xdf\xd8\x37\x7b\xbc\xd9\x54\x13\x3d\x45\xb8\xaf\xc2\x95\xfa\x31\x6b\xc3\x15\x38\x7f\x76\x73\xb5\xbf\x11\x36\x53\x53\xb6\xd9\xae\x6b\x36\xfa\x5f\x42\x63\x51\x98\x90\xf2\x3c\x5b\x2e\x22\xf1\x01\x19\x2a\x76\xb2\xfb\x88\x2f\xef\x11\xc3\x20\x39\x4f\xd4\xf1\xde\x28\xc7\x1c\x41\x9c\xa2\x92\x61\xfe\xe0\x7d\x5e\x7f\xf0\xdf\x36\x78\x36\x37\x0f\x33\x51\x1e\x2b\xc6\x69\xde\x60\xd8\x1b\xe7\xe2\xc5\xb2\xae\x21\x00\x39\x8d\xe5\xe3\x02\x86\xe4\xad\x0f\x54\x4c\xf3\x9c\x16\x8f\xab\x55\xd7\x5e\x7a\x8b\x52\x4d\xb3\x18\x85\xca\xde\x48\x71\x8a\xc5\x55\xfe\x6b\x9a\xfc\x9f\xa9\xbd\x74\xc9\x1f\x0c\x7a\x2e\xb7\xc5\x1a\xa5\xf7\x22\x95\x84\xab\xe9\xbd\xd1\x39\x47\xe7\x9e\x30\x8b\x4b\x22\x65\xeb\xd3\xfb\x36\x2b\x93\x6e\x51\xe4\x26\x43\x5b\xfc\xf3\xfa\xd3\x47\x90\x92\xf7\x86\x60\xf3\xf7\x8b\x2a\xcf\x51\x79\x00\x0b\x72\xcd\x92\x07\x4d\xef\x95\xae\x2a\x29\xd6\x34\xd5\xbb\xa2\x50\xc1\x1b\x49\xcc\x96\x7f\x07\x00\x00\xff\xff\xb9\x68\xd8\x77\x02\x1d\x00\x00")

func bindataReportsHtmlDefaultGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlDefaultGohtml,
		"reports/html/default.gohtml",
	)
}



func bindataReportsHtmlDefaultGohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlDefaultGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/default.gohtml",
		size: 7426,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1629542127, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataReportsHtmlTimelogGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x57\xdd\xae\xa3\x36\x10\xbe\xcf\x53\x4c\xd1\x5e\xec\x1e\x29\xa0\xd3\xaa\xd2\x6a\xc5\xc9\xc5\x9e\x9f\xb6\x52\xff\xb4\x49\x1f\xc0\xc1\x93\xe0\x2e\xb6\x91\x3d\xec\x69\x84\xf2\xee\x95\x6d\x20\x90\x00\xc9\xd9\x9b\x00\x1e\xcf\x37\x7f\xdf\xd8\x93\xba\x5e\x42\x72\xb7\xd7\x74\x28\xf1\x13\xec\x05\xe5\xd5\x36\xce\xb4\x4c\xfe\x65\xca\x6a\xb3\x4f\xf6\x9a\x84\xc4\xf6\x61\xb0\xd4\x86\xe2\xcf\x55\xf6\x15\xe9\x8b\xff\xb8\x4b\x60\x79\x3c\x2e\x16\x75\xcd\x71\x27\x14\x42\x14\xa4\xd1\xf1\xb8\x00\x00\xb8\x6a\x81\xb4\x4c\xf6\x7a\xe9\x1e\x0d\xfc\x17\xb4\x55\x41\x01\xa6\x81\x0f\x48\xef\xb6\x7e\x0d\x3e\x3d\x40\x7c\x5a\xb4\xb9\x7e\x7d\xfe\x8f\x65\x7e\x3d\x40\xfc\x55\x92\xd0\xca\xc6\xeb\x56\xf4\x54\x19\xe6\x97\xe0\x4c\x4f\x96\x74\xb8\xd4\x0b\xa1\x05\x75\xb7\x63\xa8\xb4\x26\x5d\x6e\x84\xc4\x59\xbd\x6e\x93\x4b\x8e\x53\x4e\xb9\xf8\x06\x59\xc1\xac\x7d\x88\x42\x1c\xd1\xca\x0b\x02\xb2\xd8\x41\x13\x5e\xdc\x37\x39\xd8\xa0\x0d\xbc\x57\x9a\x86\x1b\xd7\xba\x32\x19\x7e\x80\x53\x3c\x67\xaa\xde\x38\xb1\x6d\x81\xad\x79\xff\xb1\xe4\x8c\x18\x84\x57\xcd\x79\xcf\x99\xa1\x62\x8e\x8c\x4f\xc9\xcc\xb8\x20\x38\x9c\xdc\xa1\xdc\x22\xe7\xc8\x81\x04\x15\x08\xa4\xe1\x2b\x62\xd9\x7c\x31\xc5\x83\x75\x0b\xa4\xf7\x48\x39\x1a\x10\x0a\x4a\x23\x14\x21\x87\xbf\x9f\x5e\xec\x5d\x32\x12\x4a\xcf\x33\xc8\x74\x61\x4b\xa6\x1e\xa2\x9f\xa3\x2e\x36\x07\x1e\xad\x3a\xb2\xc4\x1b\xb7\x70\x3c\xa6\x09\xe5\x13\x61\x24\x53\x71\xcc\x06\xe8\xed\x07\x9b\x9c\x11\x2e\x5d\x9e\xd0\x38\xcb\xe2\xfe\xa3\x82\xe8\x89\x11\x46\x73\x76\x6f\x01\x59\x13\x33\x74\x15\x25\xb0\xa7\x4f\xcd\xe3\xf1\x1a\xf2\xb3\xe2\x2d\x6e\x5d\xa3\xe2\xd7\x32\xdd\x66\x57\x8e\x44\xda\x34\xd7\x5b\xa2\xa5\x7c\xf9\x2a\x38\x9e\x40\xfe\xd4\x84\x76\x16\x61\xa6\x4e\xc9\x2c\x4b\xb7\x9a\x1f\xc6\x65\x75\x6d\x98\xda\x63\xd7\x50\x2f\x86\x49\xb4\xcd\x63\x36\x23\x33\xc4\x08\x1b\x78\x1b\xa9\x75\x25\x5c\x72\x76\x70\xb1\xee\xb4\x91\x8c\x1c\x35\x20\xf6\xb5\xf5\x01\x4f\x78\x3e\x09\xe6\xaa\x70\x42\xf3\xa7\xcc\xed\x68\x63\x64\x99\x55\xb8\x70\x41\x97\x8d\x07\x57\xd5\xbc\xad\xf8\x37\xeb\x2c\x95\x38\xc7\xb1\x51\x2d\xa1\xf6\x05\x3e\xb1\xb1\x03\x6d\x5a\xb7\x9f\x94\xe7\x59\x5e\x0f\xf5\xb0\xb0\xb7\x64\xe2\xdc\x90\xab\xe5\x77\x18\xbb\x69\xef\xad\xfb\x6e\x29\xfa\x75\xa4\x5e\x8d\x5b\x82\x49\xa1\xda\xe6\x86\xf7\x46\x57\x8a\x23\xef\x16\xe2\xee\xad\x69\x9f\x0f\x6f\x24\xb3\xf2\x2d\xbf\xaa\xeb\xd8\x37\xff\x35\xed\xe9\xfe\x9f\x8b\x2e\x4d\x66\xfa\x3f\xa5\x9d\xd6\xd4\x31\xbb\xda\x92\x26\x56\x4c\x5e\x85\xa6\xdd\x69\xf4\xeb\xf2\xca\x6e\x38\xbf\xa2\xc6\xfa\xee\xa7\x96\x76\x3f\x36\x21\x9c\xce\xc3\x8d\xc7\x7e\xc3\x89\x9a\xe9\xa2\xf3\x09\x5c\x01\xfd\x4f\xcf\xcd\x61\x39\xbb\xea\xc5\xbf\x20\xdd\x60\x66\xf5\x9d\x07\xb3\x4b\xf0\xa5\x30\x4d\xfc\xd5\xbf\x3a\x9b\x71\x86\x65\x1c\xed\xc9\xfe\x18\x35\x7d\xd7\x73\xf1\xed\x1c\x7b\x78\xd2\x3f\xe6\xa2\xe0\x61\xc4\x1c\x3b\xe8\xeb\x9a\x50\x96\x85\x3b\xa7\xdb\x79\xb6\x1b\x39\x67\xdc\xed\xbe\x1b\x0f\xda\xa5\xc5\x5b\xa6\xe0\x9c\x64\x11\xc6\xca\xa4\x99\x2b\x9b\x21\xb8\xae\xdf\xe9\x92\xec\xc5\xd8\xe9\x47\xcc\xf4\x07\xae\x33\x07\x0f\x4e\x7f\xb5\x48\xdd\x03\x0a\xa6\xf6\x8e\x7a\xfe\xe5\x33\xb3\x6e\x1c\x8d\x9c\xb0\xbb\x2e\x53\x89\xc4\x20\xcb\x99\xb1\x48\x0f\xd1\x3f\x9b\x97\xe5\xc7\x86\xd2\x75\xfd\x2a\x28\x07\x6f\x34\x7e\xac\x2c\x69\xd9\x24\x78\x71\x22\x86\x5b\x70\x2d\xec\x29\xe4\x3f\x16\xfd\x64\x2c\xce\xb3\x99\x69\x29\xb5\x7a\x5c\xaf\x4f\x7f\x10\x7a\x42\x6f\xa4\x11\xa6\x49\xf0\x32\x0d\xfd\xbb\x98\x72\xa7\x1d\xe9\xd3\xfc\xbe\x75\x24\xbf\x1f\xe4\xfe\x42\xef\x09\x6d\x66\x84\xcf\x5e\xa7\x5d\x76\xe3\xd2\x49\xe8\xb8\x65\xd9\x0e\x7f\xdd\xfc\xf1\x3b\x78\xe4\x72\x00\xec\x3a\xda\xc3\xfa\x89\xbf\x92\x92\x99\x03\x8c\xc4\xd5\x88\x22\x68\xfe\xdb\xf8\x62\x76\x28\x23\x54\xeb\xb6\xa5\x49\x88\x3e\xf5\xb4\x58\xfd\x1f\x00\x00\xff\xff\x3a\xcd\xb5\xcf\xb0\x0d\x00\x00")

func bindataReportsHtmlTimelogGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataReportsHtmlTimelogGohtml,
		"reports/html/timelog.gohtml",
	)
}



func bindataReportsHtmlTimelogGohtml() (*asset, error) {
	bytes, err := bindataReportsHtmlTimelogGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "reports/html/timelog.gohtml",
		size: 3504,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1658141236, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"reports/html/commons.gohtml": bindataReportsHtmlCommonsGohtml,
	"reports/html/default.gohtml": bindataReportsHtmlDefaultGohtml,
	"reports/html/timelog.gohtml": bindataReportsHtmlTimelogGohtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"reports": {Func: nil, Children: map[string]*bintree{
		"html": {Func: nil, Children: map[string]*bintree{
			"commons.gohtml": {Func: bindataReportsHtmlCommonsGohtml, Children: map[string]*bintree{}},
			"default.gohtml": {Func: bindataReportsHtmlDefaultGohtml, Children: map[string]*bintree{}},
			"timelog.gohtml": {Func: bindataReportsHtmlTimelogGohtml, Children: map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
